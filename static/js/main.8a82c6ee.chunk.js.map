{"version":3,"sources":["components/common/Footer.js","components/common/About.js","components/common/ChartElem.js","components/common/utils/Constants.js","components/common/LineGraph.js","components/common/utils/DataProvider.js","components/common/utils/Utils.js","components/performance/total/TotalInitialCaseStatusGraphElem.js","components/performance/total/TotalRenewalCaseStatusGraphElem.js","components/performance/total/TotalInitialIntakeGraphElem.js","components/performance/total/TotalRenewalIntakeGraphElem.js","components/performance/Performance.js","components/common/BarGraph.js","components/population/AgeGroupGraphElem.js","components/population/CountryOfBirthGraphElem.js","components/common/GeoMap.js","components/population/CountryOfBirthGeoElem.js","components/population/MartialStatusGraphElem.js","components/population/SexGraphElem.js","components/population/StateGraphElem.js","components/population/StateGeoElem.js","components/population/Population.js","components/common/Routes.js","App.js","reportWebVitals.js","index.js"],"names":["Footer","className","About","class","href","target","rel","ChartElem","props","title","content","GRAPH_MARGIN","top","right","left","bottom","GRAPH_COLOR","DOUBLE_GRAPH_ASPECT","GOOGLE_DATALESS_REGION_COLOR","GOOGLE_COLOR_AXIS","GOOGLE_BACKGROUND_COLOR","POPULATION_KEY","BY_BIRTH_COUNTRY_KEY","BY_STATE_KEY","CASE_STATUS_KEY","INTAKE_KEY","LineGraph","aspect","data","margin","Constants","strokeDasharray","dataKey","formatter","value","Intl","NumberFormat","format","lines","GetInitialPerformanceByYearData","category","Object","keys","rawData","year","val","push","GetRenewalPerformanceByYearData","GetPopulationByYear","GetPopulationKeys","Set","add","Array","from","GetAgeGroupName","GetBarsFromData","keyFunc","count","barsDict","forEach","dict","key","name","fill","values","GetLinesFromData","linesDict","type","stroke","activeDot","r","WithUppercaseFirstLetter","text","charAt","toUpperCase","slice","GetContent","DataProvider","Utils","TotalInitialCaseStatusGraphElem","TotalRenewalCaseStatusGraphElem","TotalInitialIntakeGraphElem","TotalRenewalIntakeGraphElem","Performance","BarGraph","bars","GetGraphs","aboveThirtyKeyName","aboveThirtyCategories","AgeGroupGraphElem","CountryOfBirthGraphElem","state","selection","handleChange","bind","event","this","setState","country","onChange","GetSelectionOptions","options","option","React","Component","GeoMap","width","height","chartType","mapsApiKey","rootProps","CountryOfBirthGeoElem","length","datalessRegionColor","colorAxis","colors","backgroundColor","SexGraphElem","StateGraphElem","StateGeoElem","region","resolution","Population","Routes","basename","process","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","id","Nav","exact","path","component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactGA","initialize","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8IAaeA,MAbf,WAEI,OACI,wBAAQC,UAAU,gBAAlB,SACI,qBAAKA,UAAU,YAAf,SACI,qBAAKA,UAAU,cAAf,SACI,0DCmDLC,MAzDf,WAEI,OACI,qBAAKC,MAAM,YAAX,SACI,qBAAKA,MAAM,MAAX,SACI,sBAAKA,MAAM,oBAAX,UACI,2DACA,sSAEyG,mBAAGC,KAAK,mFAAR,oDAFzG,eAIA,qbAIA,kbAIA,iDACA,sMAIA,gRAIA,0eAMA,kDACA,2IACA,kTAIA,ySACA,mDACA,ivBAMA,kFACqD,mBAAGA,KAAK,2BAA2BC,OAAO,SAASC,IAAI,aAAvD,sCC/B1DC,MAlBf,SAAmBC,GAEf,OACI,gCACI,uBACA,sBAAKP,UAAU,YAAf,UACI,qBAAKA,UAAU,cAAf,SACCO,EAAMC,QAEP,qBAAKR,UAAU,YAAf,SACKO,EAAME,aAGf,2BCVCC,EAAe,CAAEC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,GACtDC,EAAc,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAElHC,EAAsB,IAStBC,EAA+B,QAC/BC,EAAoB,CAAC,aAAc,QAAS,aAC5CC,EAA0B,UAK1BC,EAAiB,aAEjBC,EAAuB,iBACvBC,EAAe,UAMfC,EAAkB,aAClBC,EAAa,S,QCRXC,MAnBf,SAAmBlB,GAEf,OACI,cAAC,IAAD,CAAqBmB,OAAQnB,EAAMmB,OAAnC,SACI,eAAC,IAAD,CACIC,KAAMpB,EAAMoB,KACZC,OAAQC,EAFZ,UAII,cAAC,IAAD,CAAeC,gBAAgB,QAC/B,cAAC,IAAD,CAAOC,QAAQ,SACf,cAAC,IAAD,IACA,cAAC,IAAD,CAASC,UAAW,SAACC,GAAD,OAAW,IAAIC,KAAKC,aAAa,MAAMC,OAAOH,MAClE,cAAC,IAAD,IACC1B,EAAM8B,Y,eC+IhB,SAASC,EAAgCC,GAG5C,IADA,IAAIZ,EAAO,GACX,MAAiBa,OAAOC,KAAKC,EAAQC,MAArC,eACA,CADK,IAAIA,EAAI,KAET,GAAqD,MAAjDD,EAAQC,KAAKA,GAAb,aACsE,MAAtED,EAAQC,KAAKA,GAAb,mBAC6F,MAA7FD,EAAQC,KAAKA,GAAb,2BACuG,MAAvGD,EAAQC,KAAKA,GAAb,0BAA0FJ,GAC9F,CACI,IAAIK,EAAMF,EAAQC,KAAKA,GAAb,0BAA0FJ,GACpGK,EAAG,KAAuBD,EAE1BhB,EAAKkB,KAAKD,IAIlB,OAAOjB,EAGJ,SAASmB,EAAgCP,GAG5C,IADA,IAAIZ,EAAO,GACX,MAAiBa,OAAOC,KAAKC,EAAQC,MAArC,eACA,CADK,IAAIA,EAAI,KAET,GAAqD,MAAjDD,EAAQC,KAAKA,GAAb,aACsE,MAAtED,EAAQC,KAAKA,GAAb,mBAC6F,MAA7FD,EAAQC,KAAKA,GAAb,2BACuG,MAAvGD,EAAQC,KAAKA,GAAb,0BAA0FJ,GAC9F,CACI,IAAIK,EAAMF,EAAQC,KAAKA,GAAb,0BAA0FJ,GACpGK,EAAG,KAAuBD,EAE1BhB,EAAKkB,KAAKD,IAIlB,OAAOjB,EAKX,SAASoB,EAAoBR,GAGzB,IADA,IAAIZ,EAAO,GACX,MAAiBa,OAAOC,KAAKC,EAAQC,MAArC,eACA,CADK,IAAIA,EAAI,KAET,GAAoD,MAAhDD,EAAQC,KAAKA,GAAb,YAC0D,MAA1DD,EAAQC,KAAKA,GAAb,WAA6CJ,GACjD,CACI,IAAIK,EAAMF,EAAQC,KAAKA,GAAb,WAA6CJ,GACvDK,EAAG,KAAuBD,EAE1BhB,EAAKkB,KAAKD,IAIlB,OAAOjB,EAGX,SAASqB,EAAkBT,GAGvB,IADA,IAAIE,EAAO,IAAIQ,IACf,MAAiBT,OAAOC,KAAKC,EAAQC,MAArC,eACA,CADK,IAAIA,EAAI,KAET,GAAoD,MAAhDD,EAAQC,KAAKA,GAAb,YAC0D,MAA1DD,EAAQC,KAAKA,GAAb,WAA6CJ,GAE7C,cAAgBC,OAAOC,KAAKC,EAAQC,KAAKA,GAAb,WAA6CJ,IAAzE,eACA,CADK,IAAIK,EAAG,KAERH,EAAKS,IAAIN,IAKrB,OAAOO,MAAMC,KAAKX,GCzOf,SAASY,EAAgBtB,GAE5B,OAAOA,GACH,IAAK,eACD,MAAO,WACX,IAAK,kBACD,MAAO,QACX,IAAK,uBACD,MAAO,QACX,IAAK,oBACD,MAAO,QACX,IAAK,wBACD,MAAO,QACX,IAAK,uBACD,MAAO,QACX,IAAK,yBACD,MAAO,QACX,IAAK,wBACD,MAAO,QACX,IAAK,cACD,MAAO,UACX,QACI,MAAO,WAIZ,SAASuB,EAAgB3B,GAC/B,IADqC4B,EACtC,uDADgD,KAExCC,EAAQ,EACRC,EAAW,GAWf,OATA9B,EAAK+B,SAAQ,SAASC,GAClB,cAAgBnB,OAAOC,KAAKkB,GAA5B,eAAkC,CAA7B,IAAIC,EAAG,KACI,SAARA,GAAoBA,KAAOH,IAC3BA,EAASG,GAAO,cAAC,IAAD,CAAKC,KAAkB,MAAXN,EAAkBA,EAAQK,GAAOA,EAAM7B,QAAS6B,EAAKE,KAAMjC,EAAsB2B,IAAaA,GAC1HA,GAAS,OAKdhB,OAAOuB,OAAON,GAuBlB,SAASO,EAAiBrC,GAChC,IADsC4B,EACvC,uDADiD,KAEzCC,EAAQ,EACRS,EAAY,GAWhB,OATAtC,EAAK+B,SAAQ,SAASC,GAClB,cAAgBnB,OAAOC,KAAKkB,GAA5B,eAAkC,CAA7B,IAAIC,EAAG,KACI,SAARA,GAAoBA,KAAOK,IAC3BA,EAAUL,GAAO,cAAC,IAAD,CAAMM,KAAK,WAAWL,KAAkB,MAAXN,EAAkBA,EAAQK,GAAOA,EAAM7B,QAAS6B,EAAKO,OAAQtC,EAAsB2B,GAAQY,UAAW,CAAEC,EAAG,IAAUb,GACnKA,GAAS,OAKdhB,OAAOuB,OAAOE,GAGlB,SAASK,EAAyBC,GAErC,OAAOA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,GC/ErD,SAASC,IAEL,IAAIhD,EAAOiD,EAA6C/C,GACpDQ,EAAQwC,EAAuBlD,EAAMkD,GACzC,OAAO,cAAC,EAAD,CAAWnD,OJLa,EIK0BC,KAAMA,EAAMU,MAAOA,IAUjEyC,MAPf,WAEI,OACG,cAAC,EAAD,CAAWtE,MAAM,uCAAuCC,QAASkE,OCVxE,SAASA,IAEL,IAAIhD,EAAOiD,EAA6C/C,GACpDQ,EAAQwC,EAAuBlD,EAAMkD,GACzC,OAAO,cAAC,EAAD,CAAWnD,OLLa,EKK0BC,KAAMA,EAAMU,MAAOA,IAUjE0C,MAPf,WAEI,OACG,cAAC,EAAD,CAAWvE,MAAM,uCAAuC0D,KAAK,aAAazD,QAASkE,OCV1F,SAASA,IAEL,IAAIhD,EAAOiD,EAA6C/C,GACpDQ,EAAQwC,EAAuBlD,EAAMkD,GACzC,OAAO,cAAC,EAAD,CAAWnD,ONLa,EMK0BC,KAAMA,EAAMU,MAAOA,IAUjE2C,MAPf,WAEI,OACG,cAAC,EAAD,CAAWxE,MAAM,kCAAkC0D,KAAK,aAAazD,QAASkE,OCVrF,SAASA,IAEL,IAAIhD,EAAOiD,EAA6C/C,GACpDQ,EAAQwC,EAAuBlD,EAAMkD,GACzC,OAAO,cAAC,EAAD,CAAWnD,OPLa,EOK0BC,KAAMA,EAAMU,MAAOA,IAUjE4C,MAPf,WAEI,OACG,cAAC,EAAD,CAAWzE,MAAM,kCAAkCC,QAASkE,OCAlDO,MAXjB,WACI,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCaOC,MAnBf,SAAkB5E,GAEd,OACI,cAAC,IAAD,CAAqBmB,OAAQnB,EAAMmB,OAAnC,SACI,eAAC,IAAD,CACIC,KAAMpB,EAAMoB,KACZC,OAAQC,EAFZ,UAII,cAAC,IAAD,CAAeC,gBAAgB,QAC/B,cAAC,IAAD,CAAOC,QAAQ,SACf,cAAC,IAAD,IACA,cAAC,IAAD,CAASC,UAAW,SAACC,GAAD,OAAW,IAAIC,KAAKC,aAAa,MAAMC,OAAOH,MAClE,cAAC,IAAD,IACC1B,EAAM6E,WCXvB,SAASC,IAEL,IAAI1D,ERJD,WAKH,IAHA,IAAI2D,EAAqB,cACrBC,EAAwB,CAAC,wBAAyB,uBAAwB,yBAA0B,yBACpG5D,EAAO,GACX,MAAiBa,OAAOC,KAAKC,EAAQC,MAArC,eACA,CADK,IAAIA,EAAI,KAET,GAAoD,MAAhDD,EAAQC,KAAKA,GAAb,YAC4E,MAA5ED,EAAQC,KAAKA,GAAb,sBACJ,CACI,IAAIC,EAAMF,EAAQC,KAAKA,GAAb,sBACVC,EAAG,KAAuBD,EAF9B,oBAIyB4C,GAJzB,IAII,2BAA2C,CAAC,IAAnChD,EAAkC,QACnCA,KAAYK,IACN0C,KAAsB1C,EAIxBA,EAAG,aAAwBA,EAAIL,GAH/BK,EAAG,YAAuBA,EAAIL,WAM/BK,EAAIL,IAbnB,8BAgBIZ,EAAKkB,KAAKD,IAIlB,OAAOjB,EQzBIiD,GACPvC,EAAQwC,EAAuBlD,EAAMkD,GACrCO,EAAOP,EAAsBlD,EAAMkD,GACvC,OACI,sBAAK7E,UAAU,MAAf,UACI,qBAAKA,UAAU,WAAf,SACC,cAAC,EAAD,CAAW0B,OAAQG,EAA+BF,KAAMA,EAAMU,MAAOA,MAEtE,qBAAKrC,UAAU,WAAf,SACI,cAAC,EAAD,CAAU0B,OAAQG,EAA+BF,KAAMA,EAAMyD,KAAMA,SAYpEI,MAPf,WAEI,OACG,cAAC,EAAD,CAAWhF,MAAM,kCAAkCC,QAAS4E,O,wDCgCpDI,E,kDAjDX,WAAYlF,GACX,IAAD,sBACI,cAAMA,GAEN,IAAIkC,ET8DDO,EAAkBnB,GSjEzB,OAII,EAAK6D,MAAQ,CAACjD,KAAMA,EAAMkD,UAAWlD,EAAK,IAE1C,EAAKmD,aAAe,EAAKA,aAAaC,KAAlB,gBANxB,E,yDASaC,GAETC,KAAKC,SAAS,CAACL,UAAWG,EAAM1F,OAAO6B,U,mCAKvC,IAAIN,ETWL,SAAqCsE,GAGxC,IADA,IAAItE,EAAO,GACX,MAAiBa,OAAOC,KAAKC,EAAQC,MAArC,eACA,CADK,IAAIA,EAAI,KAET,GAAoD,MAAhDD,EAAQC,KAAKA,GAAb,YACgF,MAAhFD,EAAQC,KAAKA,GAAb,2BACAsD,KAAWvD,EAAQC,KAAKA,GAAb,0BACf,CACI,IAAIC,EAAM,CAAC,KAASD,GACpBC,EAAIqD,GAAWvD,EAAQC,KAAKA,GAAb,0BAA6EsD,GAE5FtE,EAAKkB,KAAKD,IAIlB,OAAOjB,ES3BQiD,CAAyCmB,KAAKL,MAAMC,WAC3DtD,EAAQwC,EAAuBlD,GACnC,OACI,gCACI,wBAAQM,MAAO8D,KAAKL,MAAMC,UAAWO,SAAUH,KAAKH,aAApD,SACKG,KAAKI,wBAEV,uBACA,uBACA,cAAC,EAAD,CAAWzE,OX9BQ,EW8B+BC,KAAMA,EAAMU,MAAOA,S,4CAM7E,IADJ,EACQ+D,EAAU,GADlB,cAEuBL,KAAKL,MAAMjD,MAFlC,IAEI,2BACA,CAAC,IADQ4D,EACT,QACID,EAAQvD,KAAK,wBAAQZ,MAAOoE,EAAf,SAAqCA,GAATA,KAJjD,8BAOI,OAAOD,I,+BAKP,OACI,cAAC,EAAD,CAAW5F,MAAM,yCAAyCC,QAASsF,KAAKpB,mB,GA9C9C2B,IAAMC,W,SCW7BC,MAff,SAAgBjG,GAEZ,OACI,cAAC,IAAD,CACIkG,MAAO,OACPC,OZIqB,IYHrBC,UAAU,WACVhF,KAAMpB,EAAMoB,KACZiF,WZFe,0CYGfC,UAAW,CAAE,cAAe,KAC5BT,QAAS7F,EAAM6F,WC2CZU,E,kDAhDX,WAAYvG,GACX,IAAD,sBACI,cAAMA,GAEN,IAAIkC,EXkEL,WAGH,IADA,IAAIA,EAAO,IAAIQ,IACf,MAAiBT,OAAOC,KAAKC,EAAQC,MAArC,eACA,CADK,IAAIA,EAAI,KAE2C,MAAhDD,EAAQC,KAAKA,GAAb,YACgF,MAAhFD,EAAQC,KAAKA,GAAb,2BAEAF,EAAKS,IAAIP,GAIjB,OAAOQ,MAAMC,KAAKX,GW9EHmC,GAHf,OAII,EAAKc,MAAQ,CAACjD,KAAMA,EAAMkD,UAAWlD,EAAKA,EAAKsE,OAAO,IAEtD,EAAKnB,aAAe,EAAKA,aAAaC,KAAlB,gBANxB,E,yDASaC,GAETC,KAAKC,SAAS,CAACL,UAAWG,EAAM1F,OAAO6B,U,mCAKvC,IAAIN,EX+BL,SAA4CgB,GAE/C,IAAIhB,EAAO,CAAC,CFhDuB,UEgDaE,IAEhD,GAA0B,MAAtBa,EAAQC,KAAKA,IACmC,MAAhDD,EAAQC,KAAKA,GAAb,YACAD,EAAQC,KAAKA,GAAb,0BAEA,cAAoBH,OAAOC,KAAKC,EAAQC,KAAKA,GAAb,2BAAhC,eACA,CADK,IAAIsD,EAAO,KAEZtE,EAAKkB,KAAK,CAACoD,EAASvD,EAAQC,KAAKA,GAAb,0BAA6EsD,KAIzG,OAAOtE,EW7CQiD,CAAgDmB,KAAKL,MAAMC,WACtE,OACI,gCACI,wBAAQ1D,MAAO8D,KAAKL,MAAMC,UAAWO,SAAUH,KAAKH,aAApD,SACKG,KAAKI,wBAEV,uBACA,uBACA,cAAC,EAAD,CAAQxE,KAAMA,EAAMyE,QVezB,CACHY,oBAAqBnF,EACrBoF,UAAW,CAAEC,OAAQrF,GACrBsF,gBAAiBtF,U,4CUZjB,IADJ,EACQuE,EAAU,GADlB,cAEuBL,KAAKL,MAAMjD,MAFlC,IAEI,2BACA,CAAC,IADQ4D,EACT,QACID,EAAQvD,KAAK,wBAAQZ,MAAOoE,EAAf,SAAqCA,GAATA,KAJjD,8BAOI,OAAOD,I,+BAKP,OACI,cAAC,EAAD,CAAW5F,MAAM,yCAAyCC,QAASsF,KAAKpB,mB,GA7ChD2B,IAAMC,WCC1C,SAASlB,IAEL,IAAI1D,EZsFGoB,EFrE0B,mBchB7BV,EAAQwC,EAAuBlD,EAAMkD,GACrCO,EAAOP,EAAsBlD,EAAMkD,GACvC,OACI,sBAAK7E,UAAU,MAAf,UACI,qBAAKA,UAAU,WAAf,SACI,cAAC,EAAD,CAAW0B,OAAQG,EAA+BF,KAAMA,EAAMU,MAAOA,MAEzE,qBAAKrC,UAAU,WAAf,SACI,cAAC,EAAD,CAAU0B,OAAQG,EAA+BF,KAAMA,EAAMyD,KAAMA,SAYpEI,OAPf,WAEI,OACG,cAAC,EAAD,CAAWhF,MAAM,uCAAuCC,QAAS4E,OCnBxE,SAASV,KAEL,IAAIhD,Eb2FGoB,EFzEe,SejBlBV,EAAQwC,EAAuBlD,EAAMkD,GACrCO,EAAOP,EAAsBlD,EAAMkD,GACvC,OACI,sBAAK7E,UAAU,MAAf,UACI,qBAAKA,UAAU,WAAf,SACI,cAAC,EAAD,CAAW0B,OAAQG,EAA+BF,KAAMA,EAAMU,MAAOA,MAEzE,qBAAKrC,UAAU,WAAf,SACI,cAAC,EAAD,CAAU0B,OAAQG,EAA+BF,KAAMA,EAAMyD,KAAMA,SAYpEgC,OAPf,WAEI,OACG,cAAC,EAAD,CAAW5G,MAAM,4BAA4BC,QAASkE,QCiC9C0C,G,kDAjDX,WAAY9G,GACX,IAAD,sBACI,cAAMA,GAEN,IAAIkC,Ed+HDO,EAAkBnB,GclIzB,OAII,EAAK6D,MAAQ,CAACjD,KAAMA,EAAMkD,UAAWlD,EAAK,IAE1C,EAAKmD,aAAe,EAAKA,aAAaC,KAAlB,gBANxB,E,yDASaC,GAETC,KAAKC,SAAS,CAACL,UAAWG,EAAM1F,OAAO6B,U,mCAKvC,IAAIN,Ed4EL,SAA8B+D,GAGjC,IADA,IAAI/D,EAAO,GACX,MAAiBa,OAAOC,KAAKC,EAAQC,MAArC,eACA,CADK,IAAIA,EAAI,KAET,GAAoD,MAAhDD,EAAQC,KAAKA,GAAb,YACwE,MAAxED,EAAQC,KAAKA,GAAb,oBACA+C,KAAShD,EAAQC,KAAKA,GAAb,mBACb,CACI,IAAIC,EAAM,CAAC,KAASD,GACpBC,EAAI8C,GAAShD,EAAQC,KAAKA,GAAb,mBAAqE+C,GAElF/D,EAAKkB,KAAKD,IAIlB,OAAOjB,Ec5FQiD,CAAkCmB,KAAKL,MAAMC,WACpDtD,EAAQwC,EAAuBlD,GACnC,OACI,gCACI,wBAAQM,MAAO8D,KAAKL,MAAMC,UAAWO,SAAUH,KAAKH,aAApD,SACKG,KAAKI,wBAEV,uBACA,uBACA,cAAC,EAAD,CAAWzE,OhB/BQ,EgB+B+BC,KAAMA,EAAMU,MAAOA,S,4CAM7E,IADJ,EACQ+D,EAAU,GADlB,cAEuBL,KAAKL,MAAMjD,MAFlC,IAEI,2BACA,CAAC,IADQ4D,EACT,QACID,EAAQvD,KAAK,wBAAQZ,MAAOoE,EAAf,SAAqCA,GAATA,KAJjD,8BAOI,OAAOD,I,+BAKP,OACI,cAAC,EAAD,CAAW5F,MAAM,2CAA2CC,QAASsF,KAAKpB,mB,GA9CzD2B,IAAMC,WCgDpBe,G,kDAhDX,WAAY/G,GACX,IAAD,sBACI,cAAMA,GAEN,IAAIkC,EfoIL,WAGH,IADA,IAAIA,EAAO,IAAIQ,IACf,MAAiBT,OAAOC,KAAKC,EAAQC,MAArC,eACA,CADK,IAAIA,EAAI,KAE2C,MAAhDD,EAAQC,KAAKA,GAAb,YACwE,MAAxED,EAAQC,KAAKA,GAAb,oBAEAF,EAAKS,IAAIP,GAIjB,OAAOQ,MAAMC,KAAKX,GehJHmC,GAHf,OAII,EAAKc,MAAQ,CAACjD,KAAMA,EAAMkD,UAAWlD,EAAKA,EAAKsE,OAAO,IAEtD,EAAKnB,aAAe,EAAKA,aAAaC,KAAlB,gBANxB,E,yDASaC,GAETC,KAAKC,SAAS,CAACL,UAAWG,EAAM1F,OAAO6B,U,mCAKvC,IAAIN,EfiGL,SAAqCgB,GAExC,IAAIhB,EAAO,CAAC,CFjHqB,QEiHaE,IAE9C,GAA0B,MAAtBa,EAAQC,KAAKA,IACmC,MAAhDD,EAAQC,KAAKA,GAAb,YACAD,EAAQC,KAAKA,GAAb,mBAEA,cAAkBH,OAAOC,KAAKC,EAAQC,KAAKA,GAAb,oBAA9B,eACA,CADK,IAAI+C,EAAK,KAEV/D,EAAKkB,KAAK,CAAC6C,EAAOhD,EAAQC,KAAKA,GAAb,mBAAqE+C,KAI/F,OAAO/D,Ee/GQiD,CAAyCmB,KAAKL,MAAMC,WAC/D,OACI,gCACI,wBAAQ1D,MAAO8D,KAAKL,MAAMC,UAAWO,SAAUH,KAAKH,aAApD,SACKG,KAAKI,wBAEV,uBACA,uBACA,cAAC,EAAD,CAAQxE,KAAMA,EAAMyE,QdwBzB,CACHmB,OH7CwB,KG8CxBC,WH7CmC,YG8CnCR,oBAAqBnF,EACrBoF,UAAW,CAAEC,OAAQrF,GACrBsF,gBAAiBtF,U,4CcvBjB,IADJ,EACQuE,EAAU,GADlB,cAEuBL,KAAKL,MAAMjD,MAFlC,IAEI,2BACA,CAAC,IADQ4D,EACT,QACID,EAAQvD,KAAK,wBAAQZ,MAAOoE,EAAf,SAAqCA,GAATA,KAJjD,8BAOI,OAAOD,I,+BAKP,OACI,cAAC,EAAD,CAAW5F,MAAM,2CAA2CC,QAASsF,KAAKpB,mB,GA7C3D2B,IAAMC,WCgBhBkB,OAdjB,WACI,OACE,gCACE,cAAC,EAAD,IACA,cAAC,GAAD,IACA,cAAC,EAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,EAAD,IACA,cAAC,GAAD,Q,sCCiBOC,OA5Bf,WACI,OACE,8BACE,eAAC,KAAD,CAAQC,SAAUC,iBAAlB,UACE,eAACC,GAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,KAAK/H,UAAU,YAAzC,UACE,cAAC6H,GAAA,EAAOG,MAAR,CAAcC,GAAIC,KAAMC,GAAG,IAA3B,4BACA,cAACN,GAAA,EAAOO,OAAR,CAAeC,gBAAc,qBAC7B,cAACR,GAAA,EAAOS,SAAR,CAAiBC,GAAG,mBAApB,SACE,eAACC,GAAA,EAAD,CAAKxI,UAAU,UAAf,UACE,cAACwI,GAAA,EAAIN,KAAL,CAAUD,GAAIC,KAAMC,GAAG,cAAvB,6BACA,cAACK,GAAA,EAAIN,KAAL,CAAUD,GAAIC,KAAMC,GAAG,eAAvB,8BACA,cAACK,GAAA,EAAIN,KAAL,CAAUD,GAAIC,KAAMC,GAAG,SAAvB,2BAIN,eAAC,KAAD,WACE,cAAC,KAAD,CAAOM,OAAK,EAACC,KAAK,cAAcC,UAAWlB,KAC3C,cAAC,KAAD,CAAOgB,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,KAAD,CAAUP,GAAG,kBAEf,cAAC,KAAD,CAAOM,OAAK,EAACC,KAAK,eAAeC,UAAWzD,IAC5C,cAAC,KAAD,CAAOuD,OAAK,EAACC,KAAK,SAASC,UAAW1I,aCVnC2I,OAbf,WACE,OACE,eAAC,KAAD,WACE,qBAAK5I,UAAU,kBAAf,SACE,qBAAKA,UAAU,kBAAf,SACE,cAAC,GAAD,QAGJ,cAAC,EAAD,Q,8BCAS6I,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,cCCdQ,KAAQC,WAAW,kBAEnBC,KAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bf,M","file":"static/js/main.8a82c6ee.chunk.js","sourcesContent":["function Footer()\n{\n    return (\n        <footer className=\"sticky-footer\">\n            <div className=\"container\">\n                <div className=\"text-center\">\n                    <small> joelhmarquez </small>\n                </div>\n            </div>\n        </footer>\n    );\n}\n\nexport default Footer;","function About()\n{\n    return (\n        <div class=\"container\">\n            <div class=\"row\">\n                <div class=\"col-lg-12 mx-auto\">\n                    <p>Welcome to DACA Analytics!</p>\n                    <p>\n                        This is a project born out of a desire to better visualize the make-up of DACA Beneficiaries as well as the performance of the program throughout its lifetime.\n                        All of the data presented in this application was extracted from official USCIS reports found on the <a href=\"https://www.uscis.gov/tools/reports-and-studies/immigration-and-citizenship-data\">USCIS Immigration and Citizenship Data</a> webpage.\n                    </p>\n                    <p>\n                        The sections below describe the information that you can find in the two visualization tools, population and performance, respectively.\n                        I will continue to update these tools with additional visualizations of the existing data, as well as visualizations for new data that I haven't gotten a chance to explore as much, such as performance data per birth country and by state of residence, to name a couple.\n                    </p>\n                    <p>\n                        Some of the numbers in the datasets were ommitted in the USCIS reports since the number was under 10 and therefore could potentially identify individual recipients.\n                        In the reports, they were marked as 'D'. In the visualizations on this site, I have gone ahead and just marked them as zero instead. So please note that some of the results marked zero may actually be an undisclosed number less than 10.\n                    </p>\n                    <h5>Population Data</h5>\n                    <p>\n                        The population data visualization tool focuses on the characteristics of active DACA recipients.\n                        It examines the trends in population for a given category over time.   \n                    </p>\n                    <p>\n                        Three of categories explored are population by age group, sex, and marital status.\n                        In the given line and bar charts, we can explore how the population has changed over time for each given group as well how each option compares to the rest.\n                    </p>\n                    <p>\n                        The other two categories explored are population by birth country and by state of residence.\n                        There are two visualizations for these categories.\n                        In the first, we can select a country or state from the drop-down lists and examine the population changes for the given country/state throughout the years.\n                        The second are geomap visualizations where we can hover over a given country/state and see the population of DACA beneficiaries from the give country/state. \n                    </p>\n                    <h5>Performance Data</h5>\n                    <p>The performance data visualization tool explores the administrative data provided by USCIS regarding DACA.</p>\n                    <p>\n                        In this tool, we can explore the volume of applications received by USCIS throughout the years and how many were accepted and rejected.\n                        We are also able to explore the accepted applications further by examining how many were accepted, rejected and pending for a given year.\n                    </p>\n                    <p>There are some additional visualizations that I will add to this tool such as the performance data for a given country of birth and state of residence, as well as additional performance data such as number of expiring permits for a given month in the current year.</p>\n                    <h5>About The Creator</h5>\n                    <p>\n                        My name is Joel, I am a 23-year-old DACA recipient originally from Mexico. I have lived in the US since the age of 8 and have been a DACA recipient since shortly after the program's creation—2013.\n                        As most DACA recipients will tell you, DACA has opened up a lot of opportunities for those of us lucky enough to qualify.\n                        The work authorization it provides along with the deferred action helped me find a way through college and allowed me to enter the workforce following my graduation in 2018.\n                        I joined Microsoft as a software engineer following my college graduation where I get to contribute to building the calling and meetings services that power Microsoft Teams and Skype alongside an amazing team of engineers.\n                    </p>\n                    <p>\n                        Learn more about me and what I am up to it at my <a href=\"https://joelhmarquez.com\" target=\"_blank\" rel=\"noreferrer\">personal site</a>\n                    </p>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default About;","function ChartElem(props)\n{\n    return (\n        <div>\n            <br/>\n            <div className=\"card lg-6\">\n                <div className=\"card-header\">\n                {props.title}\n                </div>\n                <div className=\"card-body\">\n                    {props.content}\n                </div>\n            </div>\n            <br/>\n        </div>\n    );\n}\n\nexport default ChartElem;","// Graph Constants\nexport const GRAPH_WIDTH = 675\nexport const GRAPH_HEIGHT = 400\nexport const GRAPH_MARGIN = { top: 5, right: 30, left: 20, bottom: 5 }\nexport const GRAPH_COLOR = [\"#81D4FA\", \"#F48FB1\", \"#FDD835\", \"#CE93D8\", \"#00E676\", \"#8D6E63\", \"#E53935\", \"#00ACC1\", \"#455A64\", \"#FFFF00\"]\nexport const SINGLE_GRAPH_ASPECT = 3\nexport const DOUBLE_GRAPH_ASPECT = 1.6\n\n// Google Maps Constants\nexport const GOOGLE_MAPS = \"AIzaSyAzxUpL3pXpeOOc2-6SzhsnIi3HMi4Olk4\"\nexport const GOOGLE_MAPS_COUNTRY_KEY = \"Country\"\nexport const GOOGLE_MAPS_STATE_KEY = \"State\"\nexport const GOOGLE_MAP_HEIGHT = 600\nexport const GOOGLE_REGION_US = \"US\"\nexport const GOOGLE_RESOLUTION_PROVINCES = \"provinces\"\nexport const GOOGLE_DATALESS_REGION_COLOR = \"white\"\nexport const GOOGLE_COLOR_AXIS = [\"lightgreen\", \"green\", \"darkgreen\"]\nexport const GOOGLE_BACKGROUND_COLOR = \"#81d4fa\"\n\n// Data Provider Constants\nexport const YEAR_KEY = \"year\"\nexport const PERFORMANCE_KEY = \"performance\"\nexport const POPULATION_KEY = \"population\"\nexport const BY_AGE_GROUP_KEY = \"byAgeGroup\"\nexport const BY_BIRTH_COUNTRY_KEY = \"byBirthCountry\"\nexport const BY_STATE_KEY = \"byState\"\nexport const BY_MARITAL_STATUS_KEY = \"byMaritalStatus\"\nexport const BY_SEX_KEY = \"bySex\"\nexport const TOTAL_KEY = \"total\"\nexport const INITIAL_KEY = \"initial\"\nexport const RENEWAL_KEY = \"renewal\"\nexport const CASE_STATUS_KEY = \"caseStatus\";\nexport const INTAKE_KEY = \"intake\";","import * as Constants from './utils/Constants'\nimport {\n    LineChart, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\n  } from 'recharts';\n\nfunction LineGraph(props)\n{\n    return (\n        <ResponsiveContainer aspect={props.aspect}>\n            <LineChart\n                data={props.data}\n                margin={Constants.GRAPH_MARGIN}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"year\" />\n                <YAxis />\n                <Tooltip formatter={(value) => new Intl.NumberFormat('en').format(value)} />\n                <Legend />\n                {props.lines}\n            </LineChart>\n        </ResponsiveContainer>\n    );\n}\n\nexport default LineGraph;","import rawData from '../../../data/data.json';\nimport * as Constants from './Constants'\n\n// Population Data Provider\n\nexport function GetPopulationByAgeGroupByYearData()\n{\n    let aboveThirtyKeyName = \"aboveThirty\"\n    let aboveThirtyCategories = [\"thirtyOneToThirtyFive\", \"thirtyOneToThirtySix\", \"thirtySixToThirtySeven\", \"thirtySixToThirtyNine\"]\n    let data = [];\n    for (var year of Object.keys(rawData.year))\n    {\n        if (rawData.year[year][Constants.POPULATION_KEY] != null &&\n            rawData.year[year][Constants.POPULATION_KEY][Constants.BY_AGE_GROUP_KEY] != null)\n        {\n            let val = rawData.year[year][Constants.POPULATION_KEY][Constants.BY_AGE_GROUP_KEY];\n            val[Constants.YEAR_KEY] = year;\n\n            for (var category of aboveThirtyCategories){\n                if (category in val){\n                    if (!(aboveThirtyKeyName in val)){\n                        val[aboveThirtyKeyName] = val[category]\n                    }\n                    else{\n                        val[aboveThirtyKeyName] += val[category]\n                    }\n                }\n                delete val[category]\n            }\n\n            data.push(val)\n        }\n    }\n\n    return data;\n}\n\nexport function GetPopulationByBirthCountry(country)\n{\n    let data = [];\n    for (var year of Object.keys(rawData.year))\n    {\n        if (rawData.year[year][Constants.POPULATION_KEY] != null &&\n            rawData.year[year][Constants.POPULATION_KEY][Constants.BY_BIRTH_COUNTRY_KEY] != null &&\n            country in rawData.year[year][Constants.POPULATION_KEY][Constants.BY_BIRTH_COUNTRY_KEY])\n        {\n            let val = {\"year\" : year};\n            val[country] = rawData.year[year][Constants.POPULATION_KEY][Constants.BY_BIRTH_COUNTRY_KEY][country];\n\n            data.push(val)\n        }\n    }\n\n    return data;\n}\n\nexport function GetPopulationByBirthCountryForYear(year)\n{\n    let data = [[Constants.GOOGLE_MAPS_COUNTRY_KEY, Constants.POPULATION_KEY]];\n\n    if (rawData.year[year] != null &&\n        rawData.year[year][Constants.POPULATION_KEY] != null &&\n        rawData.year[year][Constants.POPULATION_KEY][Constants.BY_BIRTH_COUNTRY_KEY])\n    {\n        for (var country of Object.keys(rawData.year[year][Constants.POPULATION_KEY][Constants.BY_BIRTH_COUNTRY_KEY]))\n        {\n            data.push([country, rawData.year[year][Constants.POPULATION_KEY][Constants.BY_BIRTH_COUNTRY_KEY][country]])\n        }\n    }\n\n    return data;\n}\n\nexport function GetPopulationByBirthCountryKeys()\n{\n    return GetPopulationKeys(Constants.BY_BIRTH_COUNTRY_KEY);\n}\n\nexport function GetPopulationByBirthCountryYearKeys()\n{\n    let keys = new Set();\n    for (var year of Object.keys(rawData.year))\n    {\n        if (rawData.year[year][Constants.POPULATION_KEY] != null &&\n            rawData.year[year][Constants.POPULATION_KEY][Constants.BY_BIRTH_COUNTRY_KEY] != null)\n        {\n            keys.add(year)\n        }\n    }\n    \n    return Array.from(keys);\n}\n\nexport function GetPopulationByMaritalStatusByYearData()\n{\n    return GetPopulationByYear(Constants.BY_MARITAL_STATUS_KEY);\n}\n\nexport function GetPopulationBySexByYearData()\n{\n    return GetPopulationByYear(Constants.BY_SEX_KEY);\n}\n\nexport function GetPopulationByState(state)\n{\n    let data = [];\n    for (var year of Object.keys(rawData.year))\n    {\n        if (rawData.year[year][Constants.POPULATION_KEY] != null &&\n            rawData.year[year][Constants.POPULATION_KEY][Constants.BY_STATE_KEY] != null &&\n            state in rawData.year[year][Constants.POPULATION_KEY][Constants.BY_STATE_KEY])\n        {\n            let val = {\"year\" : year};\n            val[state] = rawData.year[year][Constants.POPULATION_KEY][Constants.BY_STATE_KEY][state];\n\n            data.push(val)\n        }\n    }\n\n    return data;\n}\n\nexport function GetPopulationByStateForYear(year)\n{\n    let data = [[Constants.GOOGLE_MAPS_STATE_KEY, Constants.POPULATION_KEY]];\n\n    if (rawData.year[year] != null &&\n        rawData.year[year][Constants.POPULATION_KEY] != null &&\n        rawData.year[year][Constants.POPULATION_KEY][Constants.BY_STATE_KEY])\n    {\n        for (var state of Object.keys(rawData.year[year][Constants.POPULATION_KEY][Constants.BY_STATE_KEY]))\n        {\n            data.push([state, rawData.year[year][Constants.POPULATION_KEY][Constants.BY_STATE_KEY][state]])\n        }\n    }\n\n    return data;\n}\n\nexport function GetPopulationByStateKeys()\n{\n    return GetPopulationKeys(Constants.BY_STATE_KEY);\n}\n\nexport function GetPopulationByStateYearKeys()\n{\n    let keys = new Set();\n    for (var year of Object.keys(rawData.year))\n    {\n        if (rawData.year[year][Constants.POPULATION_KEY] != null &&\n            rawData.year[year][Constants.POPULATION_KEY][Constants.BY_STATE_KEY] != null)\n        {\n            keys.add(year)\n        }\n    }\n    \n    return Array.from(keys);\n}\n\n// Performance Data Provider\n\nexport function GetInitialPerformanceByYearData(category)\n{\n    let data = [];\n    for (var year of Object.keys(rawData.year))\n    {\n        if (rawData.year[year][Constants.PERFORMANCE_KEY] != null &&\n            rawData.year[year][Constants.PERFORMANCE_KEY][Constants.TOTAL_KEY] != null &&\n            rawData.year[year][Constants.PERFORMANCE_KEY][Constants.TOTAL_KEY][Constants.INITIAL_KEY] != null &&\n            rawData.year[year][Constants.PERFORMANCE_KEY][Constants.TOTAL_KEY][Constants.INITIAL_KEY][category] != null)\n        {\n            let val = rawData.year[year][Constants.PERFORMANCE_KEY][Constants.TOTAL_KEY][Constants.INITIAL_KEY][category];\n            val[Constants.YEAR_KEY] = year;\n\n            data.push(val)\n        }\n    }\n\n    return data;\n}\n\nexport function GetRenewalPerformanceByYearData(category)\n{\n    let data = [];\n    for (var year of Object.keys(rawData.year))\n    {\n        if (rawData.year[year][Constants.PERFORMANCE_KEY] != null &&\n            rawData.year[year][Constants.PERFORMANCE_KEY][Constants.TOTAL_KEY] != null &&\n            rawData.year[year][Constants.PERFORMANCE_KEY][Constants.TOTAL_KEY][Constants.RENEWAL_KEY] != null &&\n            rawData.year[year][Constants.PERFORMANCE_KEY][Constants.TOTAL_KEY][Constants.RENEWAL_KEY][category] != null)\n        {\n            let val = rawData.year[year][Constants.PERFORMANCE_KEY][Constants.TOTAL_KEY][Constants.RENEWAL_KEY][category];\n            val[Constants.YEAR_KEY] = year;\n\n            data.push(val)\n        }\n    }\n\n    return data;\n}\n\n// Helpers\n\nfunction GetPopulationByYear(category)\n{\n    let data = [];\n    for (var year of Object.keys(rawData.year))\n    {\n        if (rawData.year[year][Constants.POPULATION_KEY] != null &&\n            rawData.year[year][Constants.POPULATION_KEY][category] != null)\n        {\n            let val = rawData.year[year][Constants.POPULATION_KEY][category];\n            val[Constants.YEAR_KEY] = year;\n\n            data.push(val)\n        }\n    }\n\n    return data;\n}\n\nfunction GetPopulationKeys(category)\n{\n    let keys = new Set();\n    for (var year of Object.keys(rawData.year))\n    {\n        if (rawData.year[year][Constants.POPULATION_KEY] != null &&\n            rawData.year[year][Constants.POPULATION_KEY][category] != null)\n        {\n            for (var val of Object.keys(rawData.year[year][Constants.POPULATION_KEY][category]))\n            {\n                keys.add(val)\n            }\n        }\n    }\n    \n    return Array.from(keys);\n}","import * as Constants from './Constants'\nimport { Bar, Line } from 'recharts';\n\nexport function GetAgeGroupName(dataKey)\n{\n    switch(dataKey){\n        case \"underSixteen\":\n            return \"Under 16\"\n        case \"sixteenToTwenty\":\n            return \"16-20\"\n        case \"twentOneToTwentyFive\":\n            return \"20-25\"\n        case \"twentySixToThrity\":\n            return \"26-30\"\n        case \"thirtyOneToThirtyFive\":\n            return \"31-35\"\n        case \"thirtyOneToThirtySix\":\n            return \"31-36\"\n        case \"thirtySixToThirtySeven\":\n            return \"36-37\"\n        case \"thirtySixToThirtyNine\":\n            return \"37-39\"\n        case \"aboveThirty\":\n            return \"Over 30\"\n        default:\n            return \"Unknown\"\n    };\n}\n\nexport function GetBarsFromData(data, keyFunc = null)\n{\n    let count = 0;\n    let barsDict = {};\n\n    data.forEach(function(dict){\n        for (var key of Object.keys(dict)){\n            if (key !== \"year\" && !(key in barsDict)){\n                barsDict[key] = <Bar name={(keyFunc != null ? keyFunc(key) : key)} dataKey={key} fill={Constants.GRAPH_COLOR[count]} key={count} />\n                count += 1\n            }\n        }\n    });\n\n    return Object.values(barsDict);\n}\n\nexport function GetCountryGeoMapOptions()\n{\n    return {\n        datalessRegionColor: Constants.GOOGLE_DATALESS_REGION_COLOR,\n        colorAxis: { colors: Constants.GOOGLE_COLOR_AXIS },\n        backgroundColor: Constants.GOOGLE_BACKGROUND_COLOR,\n    }    \n}\n\nexport function GetStateGeoMapOptions()\n{\n    return {\n        region: Constants.GOOGLE_REGION_US,\n        resolution: Constants.GOOGLE_RESOLUTION_PROVINCES,\n        datalessRegionColor: Constants.GOOGLE_DATALESS_REGION_COLOR,\n        colorAxis: { colors: Constants.GOOGLE_COLOR_AXIS },\n        backgroundColor: Constants.GOOGLE_BACKGROUND_COLOR,\n    }    \n}\n\nexport function GetLinesFromData(data, keyFunc = null)\n{\n    let count = 0;\n    let linesDict = {};\n\n    data.forEach(function(dict){\n        for (var key of Object.keys(dict)){\n            if (key !== \"year\" && !(key in linesDict)){\n                linesDict[key] = <Line type=\"monotone\" name={(keyFunc != null ? keyFunc(key) : key)} dataKey={key} stroke={Constants.GRAPH_COLOR[count]} activeDot={{ r: 4 }} key={count} />\n                count += 1\n            }\n        }\n    });\n\n    return Object.values(linesDict);\n}\n\nexport function WithUppercaseFirstLetter(text)\n{\n    return text.charAt(0).toUpperCase() + text.slice(1);\n}","import ChartElem from '../../common/ChartElem'\nimport LineGraph from '../../common/LineGraph'\nimport * as Constants from '../../common/utils/Constants';\nimport * as DataProvider from '../../common/utils/DataProvider';\nimport * as Utils from '../../common/utils/Utils'\n\nfunction GetContent()\n{\n    let data = DataProvider.GetInitialPerformanceByYearData(Constants.CASE_STATUS_KEY);\n    let lines = Utils.GetLinesFromData(data, Utils.WithUppercaseFirstLetter)\n    return(<LineGraph aspect={Constants.SINGLE_GRAPH_ASPECT} data={data} lines={lines}/>);\n}\n\nfunction TotalInitialCaseStatusGraphElem()\n{\n    return (\n       <ChartElem title=\"Initial DACA Application Case Status\" content={GetContent()}/>\n    );\n}\n\nexport default TotalInitialCaseStatusGraphElem;","import ChartElem from '../../common/ChartElem'\nimport LineGraph from '../../common/LineGraph'\nimport * as Constants from '../../common/utils/Constants';\nimport * as DataProvider from '../../common/utils/DataProvider';\nimport * as Utils from '../../common/utils/Utils'\n\nfunction GetContent()\n{\n    let data = DataProvider.GetRenewalPerformanceByYearData(Constants.CASE_STATUS_KEY);\n    let lines = Utils.GetLinesFromData(data, Utils.WithUppercaseFirstLetter)\n    return(<LineGraph aspect={Constants.SINGLE_GRAPH_ASPECT} data={data} lines={lines}/>);\n}\n\nfunction TotalRenewalCaseStatusGraphElem()\n{\n    return (\n       <ChartElem title=\"Renewal DACA Application Case Status\" type=\"area-chart\" content={GetContent()}/>\n    );\n}\n\nexport default TotalRenewalCaseStatusGraphElem;","import ChartElem from '../../common/ChartElem'\nimport LineGraph from '../../common/LineGraph'\nimport * as Constants from '../../common/utils/Constants';\nimport * as DataProvider from '../../common/utils/DataProvider';\nimport * as Utils from '../../common/utils/Utils'\n\nfunction GetContent()\n{\n    let data = DataProvider.GetInitialPerformanceByYearData(Constants.INTAKE_KEY);\n    let lines = Utils.GetLinesFromData(data, Utils.WithUppercaseFirstLetter)\n    return(<LineGraph aspect={Constants.SINGLE_GRAPH_ASPECT} data={data} lines={lines}/>);\n}\n\nfunction TotalInitialIntakeGraphElem()\n{\n    return (\n       <ChartElem title=\"Initial DACA Application Intake\" type=\"area-chart\" content={GetContent()}/>\n    );\n}\n\nexport default TotalInitialIntakeGraphElem;","import ChartElem from '../../common/ChartElem'\nimport LineGraph from '../../common/LineGraph'\nimport * as Constants from '../../common/utils/Constants';\nimport * as DataProvider from '../../common/utils/DataProvider';\nimport * as Utils from '../../common/utils/Utils'\n\nfunction GetContent()\n{\n    let data = DataProvider.GetRenewalPerformanceByYearData(Constants.INTAKE_KEY);\n    let lines = Utils.GetLinesFromData(data, Utils.WithUppercaseFirstLetter)\n    return(<LineGraph aspect={Constants.SINGLE_GRAPH_ASPECT} data={data} lines={lines}/>);\n}\n\nfunction TotalRenewalIntakeGraphElem()\n{\n    return (\n       <ChartElem title=\"Renewal DACA Application Intake\" content={GetContent()}/>\n    );\n}\n\nexport default TotalRenewalIntakeGraphElem;","import TotalInitialCaseStatusGraphElem from './total/TotalInitialCaseStatusGraphElem';\nimport TotalRenewalCaseStatusGraphElem from './total/TotalRenewalCaseStatusGraphElem';\nimport TotalInitialIntakeGraphElem from './total/TotalInitialIntakeGraphElem'\nimport TotalRenewalIntakeGraphElem from './total/TotalRenewalIntakeGraphElem'\n\nfunction Performance() {\n    return (\n      <div>\n        <TotalInitialIntakeGraphElem/>\n        <TotalInitialCaseStatusGraphElem/>\n        <TotalRenewalIntakeGraphElem/>\n        <TotalRenewalCaseStatusGraphElem/>\n      </div>\n    );\n  }\n  \n  export default Performance;","import * as Constants from './utils/Constants'\nimport {\n    BarChart, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\n  } from 'recharts';\n\nfunction BarGraph(props)\n{\n    return (\n        <ResponsiveContainer aspect={props.aspect}>\n            <BarChart\n                data={props.data}\n                margin={Constants.GRAPH_MARGIN}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"year\" />\n                <YAxis />\n                <Tooltip formatter={(value) => new Intl.NumberFormat('en').format(value)} />\n                <Legend />\n                {props.bars}\n            </BarChart>\n        </ResponsiveContainer>\n    );\n}\n\nexport default BarGraph;","import ChartElem from '../common/ChartElem'\nimport LineGraph from '../common/LineGraph'\nimport * as Constants from '../common/utils/Constants';\nimport * as DataProvider from '../common/utils/DataProvider';\nimport * as Utils from '../common/utils/Utils'\nimport BarGraph from '../common/BarGraph';\n\nfunction GetGraphs()\n{\n    let data = DataProvider.GetPopulationByAgeGroupByYearData();\n    let lines = Utils.GetLinesFromData(data, Utils.GetAgeGroupName)\n    let bars = Utils.GetBarsFromData(data, Utils.GetAgeGroupName)\n    return(\n        <div className=\"row\">\n            <div className=\"col-lg-6\">\n             <LineGraph aspect={Constants.DOUBLE_GRAPH_ASPECT} data={data} lines={lines}/>\n            </div>\n            <div className=\"col-lg-6\">\n                <BarGraph aspect={Constants.DOUBLE_GRAPH_ASPECT} data={data} bars={bars}/>\n            </div>\n        </div>);\n}\n\nfunction AgeGroupGraphElem()\n{\n    return (\n       <ChartElem title=\"DACA Beneficiaries by Age Group\" content={GetGraphs()}/>\n    );\n}\n\nexport default AgeGroupGraphElem;","import ChartElem from '../common/ChartElem'\nimport LineGraph from '../common/LineGraph'\nimport * as Constants from '../common/utils/Constants';\nimport * as DataProvider from '../common/utils/DataProvider';\nimport * as Utils from '../common/utils/Utils'\nimport React from 'react';\n\nclass CountryOfBirthGraphElem extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n\n        let keys = DataProvider.GetPopulationByBirthCountryKeys()\n        this.state = {keys: keys, selection: keys[0]};\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event)\n    {\n        this.setState({selection: event.target.value});\n    }\n\n    GetContent()\n    {\n        let data = DataProvider.GetPopulationByBirthCountry(this.state.selection);\n        let lines = Utils.GetLinesFromData(data)\n        return(\n            <div>\n                <select value={this.state.selection} onChange={this.handleChange}>\n                    {this.GetSelectionOptions()}\n                </select>\n                <br/>\n                <br/>\n                <LineGraph aspect={Constants.SINGLE_GRAPH_ASPECT} data={data} lines={lines}/>\n            </div>);\n    }\n\n    GetSelectionOptions()\n    {\n        let options = []\n        for (var option of this.state.keys)\n        {\n            options.push(<option value={option} key={option}>{option}</option>)\n        }\n\n        return options;\n    }\n\n    render()\n    {\n        return (\n            <ChartElem title=\"DACA Beneficiaries by Country of Birth\" content={this.GetContent()}/>\n         );\n    }\n}\n\nexport default CountryOfBirthGraphElem;","import * as Constants from './utils/Constants'\nimport { Chart } from \"react-google-charts\";\n\nfunction GeoMap(props)\n{\n    return (\n        <Chart\n            width={'100%'}\n            height={Constants.GOOGLE_MAP_HEIGHT}\n            chartType=\"GeoChart\"\n            data={props.data}\n            mapsApiKey={Constants.GOOGLE_MAPS}\n            rootProps={{ 'data-testid': '1' }}\n            options={props.options}\n            />\n    );\n}\n\nexport default GeoMap;","import ChartElem from '../common/ChartElem'\nimport GeoMap from '../common/GeoMap';\nimport React from 'react';\nimport * as Utils from '../common/utils/Utils'\nimport * as DataProvider from '../common/utils/DataProvider';\n\nclass CountryOfBirthGeoElem extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n\n        let keys = DataProvider.GetPopulationByBirthCountryYearKeys()\n        this.state = {keys: keys, selection: keys[keys.length-1]};\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event)\n    {\n        this.setState({selection: event.target.value});\n    }\n\n    GetContent()\n    {\n        let data = DataProvider.GetPopulationByBirthCountryForYear(this.state.selection);\n        return(\n            <div>\n                <select value={this.state.selection} onChange={this.handleChange}>\n                    {this.GetSelectionOptions()}\n                </select>\n                <br/>\n                <br/>\n                <GeoMap data={data} options={Utils.GetCountryGeoMapOptions()}/>\n            </div>);\n    }\n\n    GetSelectionOptions()\n    {\n        let options = []\n        for (var option of this.state.keys)\n        {\n            options.push(<option value={option} key={option}>{option}</option>)\n        }\n\n        return options;\n    }\n\n    render()\n    {\n        return (\n            <ChartElem title=\"DACA Beneficiaries by Country of Birth\" content={this.GetContent()}/>\n         );\n    }\n}\n\nexport default CountryOfBirthGeoElem;","import ChartElem from '../common/ChartElem'\nimport LineGraph from '../common/LineGraph'\nimport * as Constants from '../common/utils/Constants';\nimport * as DataProvider from '../common/utils/DataProvider';\nimport * as Utils from '../common/utils/Utils'\nimport BarGraph from '../common/BarGraph';\n\nfunction GetGraphs()\n{\n    let data = DataProvider.GetPopulationByMaritalStatusByYearData();\n    let lines = Utils.GetLinesFromData(data, Utils.WithUppercaseFirstLetter)\n    let bars = Utils.GetBarsFromData(data, Utils.WithUppercaseFirstLetter)\n    return(\n        <div className=\"row\">\n            <div className=\"col-lg-6\">\n                <LineGraph aspect={Constants.DOUBLE_GRAPH_ASPECT} data={data} lines={lines}/>\n            </div>\n            <div className=\"col-lg-6\">\n                <BarGraph aspect={Constants.DOUBLE_GRAPH_ASPECT} data={data} bars={bars}/>\n            </div>\n        </div>);\n}\n\nfunction AgeGroupGraphElem()\n{\n    return (\n       <ChartElem title=\"DACA Beneficiaries by Marital Status\" content={GetGraphs()}/>\n    );\n}\n\nexport default AgeGroupGraphElem;","import ChartElem from '../common/ChartElem'\nimport LineGraph from '../common/LineGraph'\nimport * as Constants from '../common/utils/Constants';\nimport * as DataProvider from '../common/utils/DataProvider';\nimport * as Utils from '../common/utils/Utils'\nimport BarGraph from '../common/BarGraph';\n\nfunction GetContent()\n{\n    let data = DataProvider.GetPopulationBySexByYearData();\n    let lines = Utils.GetLinesFromData(data, Utils.WithUppercaseFirstLetter)\n    let bars = Utils.GetBarsFromData(data, Utils.WithUppercaseFirstLetter)\n    return(\n        <div className=\"row\">\n            <div className=\"col-lg-6\">\n                <LineGraph aspect={Constants.DOUBLE_GRAPH_ASPECT} data={data} lines={lines}/>\n            </div>\n            <div className=\"col-lg-6\">\n                <BarGraph aspect={Constants.DOUBLE_GRAPH_ASPECT} data={data} bars={bars}/>\n            </div>\n        </div>);\n}\n\nfunction SexGraphElem()\n{\n    return (\n       <ChartElem title=\"DACA Beneficiaries by Sex\" content={GetContent()}/>\n    );\n}\n\nexport default SexGraphElem;","import ChartElem from '../common/ChartElem'\nimport LineGraph from '../common/LineGraph'\nimport * as Constants from '../common/utils/Constants';\nimport * as DataProvider from '../common/utils/DataProvider';\nimport * as Utils from '../common/utils/Utils'\nimport React from 'react';\n\n\nclass StateGraphElem extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n\n        let keys = DataProvider.GetPopulationByStateKeys()\n        this.state = {keys: keys, selection: keys[0]};\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event)\n    {\n        this.setState({selection: event.target.value});\n    }\n\n    GetContent()\n    {\n        let data = DataProvider.GetPopulationByState(this.state.selection);\n        let lines = Utils.GetLinesFromData(data)\n        return(\n            <div>\n                <select value={this.state.selection} onChange={this.handleChange}>\n                    {this.GetSelectionOptions()}\n                </select>\n                <br/>\n                <br/>\n                <LineGraph aspect={Constants.SINGLE_GRAPH_ASPECT} data={data} lines={lines}/>\n            </div>);\n    }\n\n    GetSelectionOptions()\n    {\n        let options = []\n        for (var option of this.state.keys)\n        {\n            options.push(<option value={option} key={option}>{option}</option>)\n        }\n\n        return options;\n    }\n\n    render()\n    {\n        return (\n            <ChartElem title=\"DACA Beneficiaries by State of Residence\" content={this.GetContent()}/>\n         );\n    }\n}\n\nexport default StateGraphElem;","import ChartElem from '../common/ChartElem'\nimport GeoMap from '../common/GeoMap';\nimport React from 'react';\nimport * as Utils from '../common/utils/Utils'\nimport * as DataProvider from '../common/utils/DataProvider';\n\nclass StateGeoElem extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n\n        let keys = DataProvider.GetPopulationByStateYearKeys()\n        this.state = {keys: keys, selection: keys[keys.length-1]};\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event)\n    {\n        this.setState({selection: event.target.value});\n    }\n\n    GetContent()\n    {\n        let data = DataProvider.GetPopulationByStateForYear(this.state.selection);\n        return(\n            <div>\n                <select value={this.state.selection} onChange={this.handleChange}>\n                    {this.GetSelectionOptions()}\n                </select>\n                <br/>\n                <br/>\n                <GeoMap data={data} options={Utils.GetStateGeoMapOptions()}/>\n            </div>);\n    }\n\n    GetSelectionOptions()\n    {\n        let options = []\n        for (var option of this.state.keys)\n        {\n            options.push(<option value={option} key={option}>{option}</option>)\n        }\n\n        return options;\n    }\n\n    render()\n    {\n        return (\n            <ChartElem title=\"DACA Beneficiaries by State of Residence\" content={this.GetContent()}/>\n         );\n    }\n}\n\nexport default StateGeoElem;","import AgeGroupGraphElem from './AgeGroupGraphElem'\nimport CountryOfBirthGraphElem from './CountryOfBirthGraphElem'\nimport CountryOfBirthGeoElem from './CountryOfBirthGeoElem'\nimport MaritalStatusGraphElem from './MartialStatusGraphElem'\nimport SexGraphElem from './SexGraphElem'\nimport StateGraphElem from './StateGraphElem'\nimport StateGeoElem from './StateGeoElem'\n\nfunction Population() {\n    return (\n      <div>\n        <CountryOfBirthGeoElem/>\n        <StateGeoElem/>\n        <AgeGroupGraphElem/>\n        <SexGraphElem/>\n        <MaritalStatusGraphElem/>\n        <CountryOfBirthGraphElem/>\n        <StateGraphElem/>\n      </div>\n    );\n  }\n  \n  export default Population;","import About from '../common/About'\nimport Performance from '../performance/Performance'\nimport Population from '../population/Population'\nimport { Navbar,Nav } from 'react-bootstrap'\nimport { BrowserRouter as Router, Switch, Route, Redirect, Link } from \"react-router-dom\";\n\nfunction Routes() {\n    return (\n      <div>\n        <Router basename={process.env.PUBLIC_URL}>\n          <Navbar bg=\"light\" expand=\"lg\" className=\"fixed-top\">\n            <Navbar.Brand as={Link} to=\"/\">DACA Analytics</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n              <Nav className=\"ml-auto\">\n                <Nav.Link as={Link} to=\"/population\" >Population Data</Nav.Link>\n                <Nav.Link as={Link} to=\"/performance\" >Performance Data</Nav.Link>\n                <Nav.Link as={Link} to=\"/about\" >About</Nav.Link>\n              </Nav>\n            </Navbar.Collapse>\n          </Navbar>\n          <Switch>\n            <Route exact path=\"/population\" component={Population} />\n            <Route exact path=\"/\">\n              <Redirect to=\"/population\" />\n            </Route>\n            <Route exact path=\"/performance\" component={Performance} />\n            <Route exact path=\"/about\" component={About} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  };\n\nexport default Routes;","import Footer from './components/common/Footer'\nimport Routes from './components/common/Routes'\nimport { BrowserRouter  as Router } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"content-wrapper\">\n        <div className=\"container-fluid\">\n          <Routes/>\n        </div>\n      </div>\n      <Footer />\n    </Router>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactGA from 'react-ga';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactGA.initialize('UA-115530224-1');\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}