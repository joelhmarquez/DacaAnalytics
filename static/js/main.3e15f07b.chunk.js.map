{"version":3,"sources":["components/common/Footer.js","components/common/ChartElem.js","components/common/utils/Constants.js","components/common/LineGraph.js","components/common/utils/DataProvider.js","components/common/utils/Utils.js","components/performance/total/TotalInitialCaseStatusGraphElem.js","components/performance/total/TotalRenewalCaseStatusGraphElem.js","components/performance/total/TotalInitialIntakeGraphElem.js","components/performance/total/TotalRenewalIntakeGraphElem.js","components/performance/Performance.js","components/common/BarGraph.js","components/population/AgeGroupGraphElem.js","components/population/CountryOfBirthGraphElem.js","components/population/MartialStatusGraphElem.js","components/population/SexGraphElem.js","components/population/StateGraphElem.js","components/population/Population.js","components/common/Routes.js","App.js","reportWebVitals.js","index.js"],"names":["Footer","className","ChartElem","props","title","content","GRAPH_MARGIN","top","right","left","bottom","GRAPH_COLOR","DOUBLE_GRAPH_ASPECT","CASE_STATUS_KEY","INTAKE_KEY","LineGraph","aspect","data","margin","Constants","strokeDasharray","dataKey","formatter","value","Intl","NumberFormat","format","lines","byBirthCountryKeyName","byStateKeyName","GetPopulationByYear","category","Object","keys","rawData","year","val","push","GetPopulationKeys","Set","add","Array","from","GetInitialPerformanceByYearData","GetRenewalPerformanceByYearData","GetLinesFromData","keyFunc","count","linesDict","forEach","dict","key","type","name","stroke","activeDot","r","values","GetBarsFromData","barsDict","fill","GetAgeGroupName","WithUppercaseFirstLetter","text","charAt","toUpperCase","slice","GetContent","DataProvider","Utils","TotalInitialCaseStatusGraphElem","TotalRenewalCaseStatusGraphElem","TotalInitialIntakeGraphElem","TotalRenewalIntakeGraphElem","Performance","BarGraph","bars","GetGraphs","aboveThirtyKeyName","aboveThirtyCategories","AgeGroupGraphElem","CountryOfBirthGraphElem","state","selection","handleChange","bind","event","this","setState","target","country","onChange","GetSelectionOptions","options","option","React","Component","SexGraphElem","StateGraphElem","Population","Routes","basename","process","Navbar","bg","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","id","Nav","exact","path","component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactGA","initialize","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e15f07b.chunk.js","sourcesContent":["function Footer()\n{\n    return (\n        <footer className=\"sticky-footer\">\n            <div className=\"container\">\n                <div className=\"text-center\">\n                    <small> joelhmarquez </small>\n                </div>\n            </div>\n        </footer>\n    );\n}\n\nexport default Footer;","function ChartElem(props)\n{\n    return (\n        <div>\n            <br/>\n            <div className=\"card lg-6\">\n                <div className=\"card-header\">\n                {props.title}\n                </div>\n                <div className=\"card-body\">\n                    {props.content}\n                </div>\n            </div>\n            <br/>\n        </div>\n    );\n}\n\nexport default ChartElem;","export const GRAPH_WIDTH = 675\nexport const GRAPH_HEIGHT = 400\nexport const GRAPH_MARGIN = { top: 5, right: 30, left: 20, bottom: 5 }\nexport const GRAPH_COLOR = [\"#81D4FA\", \"#F48FB1\", \"#FDD835\", \"#CE93D8\", \"#00E676\", \"#8D6E63\", \"#E53935\", \"#00ACC1\", \"#455A64\", \"#FFFF00\"]\nexport const SINGLE_GRAPH_ASPECT = 3\nexport const DOUBLE_GRAPH_ASPECT = 1.6\n\n// Data Provider Constants\nexport const CASE_STATUS_KEY = \"caseStatus\";\nexport const INTAKE_KEY = \"caseStatus\";","import * as Constants from './utils/Constants'\nimport {\n    LineChart, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\n  } from 'recharts';\n\nfunction LineGraph(props)\n{\n    return (\n        <ResponsiveContainer aspect={props.aspect}>\n            <LineChart\n                data={props.data}\n                margin={Constants.GRAPH_MARGIN}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"year\" />\n                <YAxis />\n                <Tooltip formatter={(value) => new Intl.NumberFormat('en').format(value)} />\n                <Legend />\n                {props.lines}\n            </LineChart>\n        </ResponsiveContainer>\n    );\n}\n\nexport default LineGraph;","import rawData from '../../../data/data.json';\n\nconst performanceKeyName = \"performance\"\nconst populationKeyName = \"population\"\nconst byAgeGroupKeyName = \"byAgeGroup\"\nconst byBirthCountryKeyName = \"byBirthCountry\"\nconst byStateKeyName = \"byState\"\nconst byMaritalStatusKeyName = \"byMaritalStatus\"\nconst bySexKeyName = \"bySex\"\nconst totalKeyName = \"total\"\nconst initialKeyName = \"initial\"\nconst renewalKeyName = \"renewal\"\n\nexport function GetPopulationByAgeGroupByYearData()\n{\n    let aboveThirtyKeyName = \"aboveThirty\"\n    let aboveThirtyCategories = [\"thirtyOneToThirtyFive\", \"thirtyOneToThirtySix\", \"thirtySixToThirtySeven\", \"thirtySixToThirtyNine\"]\n    let data = [];\n    for (var year of Object.keys(rawData.year))\n    {\n        if (rawData.year[year][populationKeyName] != null &&\n            rawData.year[year][populationKeyName][byAgeGroupKeyName] != null)\n        {\n            let val = rawData.year[year][populationKeyName][byAgeGroupKeyName];\n            val[\"year\"] = year;\n\n            for (var category of aboveThirtyCategories){\n                if (category in val){\n                    if (!(aboveThirtyKeyName in val)){\n                        val[aboveThirtyKeyName] = val[category]\n                    }\n                    else{\n                        val[aboveThirtyKeyName] += val[category]\n                    }\n                }\n                delete val[category]\n            }\n\n            data.push(val)\n        }\n    }\n\n    return data;\n}\n\nexport function GetPopulationByBirthCountry(country)\n{\n    let data = [];\n    for (var year of Object.keys(rawData.year))\n    {\n        if (rawData.year[year][populationKeyName] != null &&\n            rawData.year[year][populationKeyName][byBirthCountryKeyName] != null &&\n            country in rawData.year[year][populationKeyName][byBirthCountryKeyName])\n        {\n            let val = {\"year\" : year};\n            val[country] = rawData.year[year][populationKeyName][byBirthCountryKeyName][country];\n\n            data.push(val)\n        }\n    }\n\n    return data;\n}\n\nexport function GetPopulationByMaritalStatusByYearData()\n{\n    return GetPopulationByYear(byMaritalStatusKeyName);\n}\n\nexport function GetPopulationBySexByYearData()\n{\n    return GetPopulationByYear(bySexKeyName);\n}\n\nexport function GetPopulationByState(state)\n{\n    let data = [];\n    for (var year of Object.keys(rawData.year))\n    {\n        if (rawData.year[year][populationKeyName] != null &&\n            rawData.year[year][populationKeyName][byStateKeyName] != null &&\n            state in rawData.year[year][populationKeyName][byStateKeyName])\n        {\n            let val = {\"year\" : year};\n            val[state] = rawData.year[year][populationKeyName][byStateKeyName][state];\n\n            data.push(val)\n        }\n    }\n\n    return data;\n}\n\nexport function GetPopulationByBirthCountryKeys()\n{\n    return GetPopulationKeys(byBirthCountryKeyName);\n}\n\nexport function GetPopulationByStateKeys()\n{\n    return GetPopulationKeys(byStateKeyName);\n}\n\nfunction GetPopulationByYear(category)\n{\n    let data = [];\n    for (var year of Object.keys(rawData.year))\n    {\n        if (rawData.year[year][populationKeyName] != null &&\n            rawData.year[year][populationKeyName][category] != null)\n        {\n            let val = rawData.year[year][populationKeyName][category];\n            val[\"year\"] = year;\n\n            data.push(val)\n        }\n    }\n\n    return data;\n}\n\nfunction GetPopulationKeys(category)\n{\n    let keys = new Set();\n    for (var year of Object.keys(rawData.year))\n    {\n        if (rawData.year[year][populationKeyName] != null &&\n            rawData.year[year][populationKeyName][category] != null)\n        {\n            for (var val of Object.keys(rawData.year[year][populationKeyName][category]))\n            {\n                keys.add(val)\n            }\n        }\n    }\n    \n    return Array.from(keys);\n}\n\nexport function GetInitialPerformanceByYearData(category)\n{\n    let data = [];\n    for (var year of Object.keys(rawData.year))\n    {\n        if (rawData.year[year][performanceKeyName] != null &&\n            rawData.year[year][performanceKeyName][totalKeyName] != null &&\n            rawData.year[year][performanceKeyName][totalKeyName][initialKeyName] != null &&\n            rawData.year[year][performanceKeyName][totalKeyName][initialKeyName][category] != null)\n        {\n            let val = rawData.year[year][performanceKeyName][totalKeyName][initialKeyName][category];\n            val[\"year\"] = year;\n\n            data.push(val)\n        }\n    }\n\n    return data;\n}\n\nexport function GetRenewalPerformanceByYearData(category)\n{\n    let data = [];\n    for (var year of Object.keys(rawData.year))\n    {\n        if (rawData.year[year][performanceKeyName] != null &&\n            rawData.year[year][performanceKeyName][totalKeyName] != null &&\n            rawData.year[year][performanceKeyName][totalKeyName][renewalKeyName] != null &&\n            rawData.year[year][performanceKeyName][totalKeyName][renewalKeyName][category] != null)\n        {\n            let val = rawData.year[year][performanceKeyName][totalKeyName][renewalKeyName][category];\n            val[\"year\"] = year;\n\n            data.push(val)\n        }\n    }\n\n    return data;\n}","import * as Constants from './Constants'\nimport { Bar, Line } from 'recharts';\n\nexport function GetLinesFromData(data, keyFunc = null)\n{\n    let count = 0;\n    let linesDict = {};\n\n    data.forEach(function(dict){\n        for (var key of Object.keys(dict)){\n            if (key !== \"year\" && !(key in linesDict)){\n                linesDict[key] = <Line type=\"monotone\" name={(keyFunc != null ? keyFunc(key) : key)} dataKey={key} stroke={Constants.GRAPH_COLOR[count]} activeDot={{ r: 4 }} key={count} />\n                count += 1\n            }\n        }\n    });\n\n    return Object.values(linesDict);\n}\n\nexport function GetBarsFromData(data, keyFunc = null)\n{\n    let count = 0;\n    let barsDict = {};\n\n    data.forEach(function(dict){\n        for (var key of Object.keys(dict)){\n            if (key !== \"year\" && !(key in barsDict)){\n                barsDict[key] = <Bar name={(keyFunc != null ? keyFunc(key) : key)} dataKey={key} fill={Constants.GRAPH_COLOR[count]} key={count} />\n                count += 1\n            }\n        }\n    });\n\n    return Object.values(barsDict);\n}\n\nexport function GetAgeGroupName(dataKey)\n{\n    switch(dataKey){\n        case \"underSixteen\":\n            return \"Under 16\"\n        case \"sixteenToTwenty\":\n            return \"16-20\"\n        case \"twentOneToTwentyFive\":\n            return \"20-25\"\n        case \"twentySixToThrity\":\n            return \"26-30\"\n        case \"thirtyOneToThirtyFive\":\n            return \"31-35\"\n        case \"thirtyOneToThirtySix\":\n            return \"31-36\"\n        case \"thirtySixToThirtySeven\":\n            return \"36-37\"\n        case \"thirtySixToThirtyNine\":\n            return \"37-39\"\n        case \"aboveThirty\":\n            return \"Over 30\"\n        default:\n            return \"Unknown\"\n    };\n}\n\nexport function WithUppercaseFirstLetter(text)\n{\n    return text.charAt(0).toUpperCase() + text.slice(1);\n}","import ChartElem from '../../common/ChartElem'\nimport LineGraph from '../../common/LineGraph'\nimport * as Constants from '../../common/utils/Constants';\nimport * as DataProvider from '../../common/utils/DataProvider';\nimport * as Utils from '../../common/utils/Utils'\n\nfunction GetContent()\n{\n    let data = DataProvider.GetInitialPerformanceByYearData(Constants.CASE_STATUS_KEY);\n    let lines = Utils.GetLinesFromData(data, Utils.WithUppercaseFirstLetter)\n    return(<LineGraph aspect={Constants.SINGLE_GRAPH_ASPECT} data={data} lines={lines}/>);\n}\n\nfunction TotalInitialCaseStatusGraphElem()\n{\n    return (\n       <ChartElem title=\"Initial DACA Application Case Status\" content={GetContent()}/>\n    );\n}\n\nexport default TotalInitialCaseStatusGraphElem;","import ChartElem from '../../common/ChartElem'\nimport LineGraph from '../../common/LineGraph'\nimport * as Constants from '../../common/utils/Constants';\nimport * as DataProvider from '../../common/utils/DataProvider';\nimport * as Utils from '../../common/utils/Utils'\n\nfunction GetContent()\n{\n    let data = DataProvider.GetRenewalPerformanceByYearData(Constants.CASE_STATUS_KEY);\n    let lines = Utils.GetLinesFromData(data, Utils.WithUppercaseFirstLetter)\n    return(<LineGraph aspect={Constants.SINGLE_GRAPH_ASPECT} data={data} lines={lines}/>);\n}\n\nfunction TotalRenewalCaseStatusGraphElem()\n{\n    return (\n       <ChartElem title=\"Renewal DACA Application Case Status\" type=\"area-chart\" content={GetContent()}/>\n    );\n}\n\nexport default TotalRenewalCaseStatusGraphElem;","import ChartElem from '../../common/ChartElem'\nimport LineGraph from '../../common/LineGraph'\nimport * as Constants from '../../common/utils/Constants';\nimport * as DataProvider from '../../common/utils/DataProvider';\nimport * as Utils from '../../common/utils/Utils'\n\nfunction GetContent()\n{\n    let data = DataProvider.GetInitialPerformanceByYearData(Constants.INTAKE_KEY);\n    let lines = Utils.GetLinesFromData(data, Utils.WithUppercaseFirstLetter)\n    return(<LineGraph aspect={Constants.SINGLE_GRAPH_ASPECT} data={data} lines={lines}/>);\n}\n\nfunction TotalInitialIntakeGraphElem()\n{\n    return (\n       <ChartElem title=\"Initial DACA Application Intake\" type=\"area-chart\" content={GetContent()}/>\n    );\n}\n\nexport default TotalInitialIntakeGraphElem;","import ChartElem from '../../common/ChartElem'\nimport LineGraph from '../../common/LineGraph'\nimport * as Constants from '../../common/utils/Constants';\nimport * as DataProvider from '../../common/utils/DataProvider';\nimport * as Utils from '../../common/utils/Utils'\n\nfunction GetContent()\n{\n    let data = DataProvider.GetRenewalPerformanceByYearData(Constants.INTAKE_KEY);\n    let lines = Utils.GetLinesFromData(data, Utils.WithUppercaseFirstLetter)\n    return(<LineGraph aspect={Constants.SINGLE_GRAPH_ASPECT} data={data} lines={lines}/>);\n}\n\nfunction TotalRenewalIntakeGraphElem()\n{\n    return (\n       <ChartElem title=\"Renewal DACA Application Intake\" content={GetContent()}/>\n    );\n}\n\nexport default TotalRenewalIntakeGraphElem;","import TotalInitialCaseStatusGraphElem from './total/TotalInitialCaseStatusGraphElem';\nimport TotalRenewalCaseStatusGraphElem from './total/TotalRenewalCaseStatusGraphElem';\nimport TotalInitialIntakeGraphElem from './total/TotalInitialIntakeGraphElem'\nimport TotalRenewalIntakeGraphElem from './total/TotalRenewalIntakeGraphElem'\n\nfunction Performance() {\n    return (\n      <div>\n        <TotalInitialIntakeGraphElem/>\n        <TotalInitialCaseStatusGraphElem/>\n        <TotalRenewalIntakeGraphElem/>\n        <TotalRenewalCaseStatusGraphElem/>\n      </div>\n    );\n  }\n  \n  export default Performance;","import * as Constants from './utils/Constants'\nimport {\n    BarChart, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\n  } from 'recharts';\n\nfunction BarGraph(props)\n{\n    return (\n        <ResponsiveContainer aspect={props.aspect}>\n            <BarChart\n                data={props.data}\n                margin={Constants.GRAPH_MARGIN}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"year\" />\n                <YAxis />\n                <Tooltip formatter={(value) => new Intl.NumberFormat('en').format(value)} />\n                <Legend />\n                {props.bars}\n            </BarChart>\n        </ResponsiveContainer>\n    );\n}\n\nexport default BarGraph;","import ChartElem from '../common/ChartElem'\nimport LineGraph from '../common/LineGraph'\nimport * as Constants from '../common/utils/Constants';\nimport * as DataProvider from '../common/utils/DataProvider';\nimport * as Utils from '../common/utils/Utils'\nimport BarGraph from '../common/BarGraph';\n\nfunction GetGraphs()\n{\n    let data = DataProvider.GetPopulationByAgeGroupByYearData();\n    let lines = Utils.GetLinesFromData(data, Utils.GetAgeGroupName)\n    let bars = Utils.GetBarsFromData(data, Utils.GetAgeGroupName)\n    return(\n        <div className=\"row\">\n            <div className=\"col-lg-6\">\n             <LineGraph aspect={Constants.DOUBLE_GRAPH_ASPECT} data={data} lines={lines}/>\n            </div>\n            <div className=\"col-lg-6\">\n                <BarGraph aspect={Constants.DOUBLE_GRAPH_ASPECT} data={data} bars={bars}/>\n            </div>\n        </div>);\n}\n\nfunction AgeGroupGraphElem()\n{\n    return (\n       <ChartElem title=\"DACA Beneficiaries by Age Group\" content={GetGraphs()}/>\n    );\n}\n\nexport default AgeGroupGraphElem;","import ChartElem from '../common/ChartElem'\nimport LineGraph from '../common/LineGraph'\nimport * as Constants from '../common/utils/Constants';\nimport * as DataProvider from '../common/utils/DataProvider';\nimport * as Utils from '../common/utils/Utils'\nimport React from 'react';\n\nclass CountryOfBirthGraphElem extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n\n        let keys = DataProvider.GetPopulationByBirthCountryKeys()\n        this.state = {keys: keys, selection: keys[0]};\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event)\n    {\n        this.setState({selection: event.target.value});\n    }\n\n    GetContent()\n    {\n        let data = DataProvider.GetPopulationByBirthCountry(this.state.selection);\n        let lines = Utils.GetLinesFromData(data)\n        return(\n            <div>\n                <select value={this.state.selection} onChange={this.handleChange}>\n                    {this.GetSelectionOptions()}\n                </select>\n                <br/>\n                <br/>\n                <LineGraph aspect={Constants.SINGLE_GRAPH_ASPECT} data={data} lines={lines}/>\n            </div>);\n    }\n\n    GetSelectionOptions()\n    {\n        let options = []\n        for (var option of this.state.keys)\n        {\n            options.push(<option value={option} key={option}>{option}</option>)\n        }\n\n        return options;\n    }\n\n    render()\n    {\n        return (\n            <ChartElem title=\"DACA Beneficiaries by Country of Birth\" content={this.GetContent()}/>\n         );\n    }\n}\n\nexport default CountryOfBirthGraphElem;","import ChartElem from '../common/ChartElem'\nimport LineGraph from '../common/LineGraph'\nimport * as Constants from '../common/utils/Constants';\nimport * as DataProvider from '../common/utils/DataProvider';\nimport * as Utils from '../common/utils/Utils'\nimport BarGraph from '../common/BarGraph';\n\nfunction GetGraphs()\n{\n    let data = DataProvider.GetPopulationByMaritalStatusByYearData();\n    let lines = Utils.GetLinesFromData(data, Utils.WithUppercaseFirstLetter)\n    let bars = Utils.GetBarsFromData(data, Utils.WithUppercaseFirstLetter)\n    return(\n        <div className=\"row\">\n            <div className=\"col-lg-6\">\n                <LineGraph aspect={Constants.DOUBLE_GRAPH_ASPECT} data={data} lines={lines}/>\n            </div>\n            <div className=\"col-lg-6\">\n                <BarGraph aspect={Constants.DOUBLE_GRAPH_ASPECT} data={data} bars={bars}/>\n            </div>\n        </div>);\n}\n\nfunction AgeGroupGraphElem()\n{\n    return (\n       <ChartElem title=\"DACA Beneficiaries by Marital Status\" content={GetGraphs()}/>\n    );\n}\n\nexport default AgeGroupGraphElem;","import ChartElem from '../common/ChartElem'\nimport LineGraph from '../common/LineGraph'\nimport * as Constants from '../common/utils/Constants';\nimport * as DataProvider from '../common/utils/DataProvider';\nimport * as Utils from '../common/utils/Utils'\nimport BarGraph from '../common/BarGraph';\n\nfunction GetContent()\n{\n    let data = DataProvider.GetPopulationBySexByYearData();\n    let lines = Utils.GetLinesFromData(data, Utils.WithUppercaseFirstLetter)\n    let bars = Utils.GetBarsFromData(data, Utils.WithUppercaseFirstLetter)\n    return(\n        <div className=\"row\">\n            <div className=\"col-lg-6\">\n                <LineGraph aspect={Constants.DOUBLE_GRAPH_ASPECT} data={data} lines={lines}/>\n            </div>\n            <div className=\"col-lg-6\">\n                <BarGraph aspect={Constants.DOUBLE_GRAPH_ASPECT} data={data} bars={bars}/>\n            </div>\n        </div>);\n}\n\nfunction SexGraphElem()\n{\n    return (\n       <ChartElem title=\"DACA Beneficiaries by Sex\" content={GetContent()}/>\n    );\n}\n\nexport default SexGraphElem;","import ChartElem from '../common/ChartElem'\nimport LineGraph from '../common/LineGraph'\nimport * as Constants from '../common/utils/Constants';\nimport * as DataProvider from '../common/utils/DataProvider';\nimport * as Utils from '../common/utils/Utils'\nimport React from 'react';\n\n\nclass StateGraphElem extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n\n        let keys = DataProvider.GetPopulationByStateKeys()\n        this.state = {keys: keys, selection: keys[0]};\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event)\n    {\n        this.setState({selection: event.target.value});\n    }\n\n    GetContent()\n    {\n        let data = DataProvider.GetPopulationByState(this.state.selection);\n        let lines = Utils.GetLinesFromData(data)\n        return(\n            <div>\n                <select value={this.state.selection} onChange={this.handleChange}>\n                    {this.GetSelectionOptions()}\n                </select>\n                <br/>\n                <br/>\n                <LineGraph aspect={Constants.SINGLE_GRAPH_ASPECT} data={data} lines={lines}/>\n            </div>);\n    }\n\n    GetSelectionOptions()\n    {\n        let options = []\n        for (var option of this.state.keys)\n        {\n            options.push(<option value={option} key={option}>{option}</option>)\n        }\n\n        return options;\n    }\n\n    render()\n    {\n        return (\n            <ChartElem title=\"DACA Beneficiaries by State of Residence\" content={this.GetContent()}/>\n         );\n    }\n}\n\nexport default StateGraphElem;","import AgeGroupGraphElem from './AgeGroupGraphElem'\nimport CountryOfBirthGraphElem from './CountryOfBirthGraphElem'\nimport MaritalStatusGraphElem from './MartialStatusGraphElem'\nimport SexGraphElem from './SexGraphElem'\nimport StateGraphElem from './StateGraphElem'\n\nfunction Population() {\n    return (\n      <div>\n        <AgeGroupGraphElem/>\n        <SexGraphElem/>\n        <MaritalStatusGraphElem/>\n        <CountryOfBirthGraphElem/>\n        <StateGraphElem/>\n      </div>\n    );\n  }\n  \n  export default Population;","import Performance from '../performance/Performance'\nimport Population from '../population/Population'\nimport { Navbar,Nav } from 'react-bootstrap'\nimport { BrowserRouter as Router, Switch, Route, Redirect, Link } from \"react-router-dom\";\n\nfunction Routes() {\n    return (\n      <div>\n        <Router basename={process.env.PUBLIC_URL}>\n          <Navbar bg=\"light\" expand=\"lg\" className=\"fixed-top\">\n            <Navbar.Brand as={Link} to=\"/\">DACA Analytics</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n              <Nav className=\"ml-auto\">\n                <Nav.Link as={Link} to=\"/population\" >Population Data</Nav.Link>\n                <Nav.Link as={Link} to=\"/performance\" >Performance Data</Nav.Link>\n              </Nav>\n            </Navbar.Collapse>\n          </Navbar>\n          <Switch>\n            <Route exact path=\"/population\" component={Population} />\n            <Route exact path=\"/\">\n              <Redirect to=\"/population\" />\n            </Route>\n            <Route exact path=\"/performance\" component={Performance} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  };\n\nexport default Routes;","import Footer from './components/common/Footer'\nimport Routes from './components/common/Routes'\nimport { BrowserRouter  as Router } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"content-wrapper\">\n        <div className=\"container-fluid\">\n          <Routes/>\n        </div>\n      </div>\n      <Footer />\n    </Router>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactGA from 'react-ga';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactGA.initialize('UA-115530224-1');\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}