{"version":3,"sources":["components/common/Footer.js","components/common/Navigation.js","components/common/ChartElem.js","components/common/Constants.js","components/common/DataProvider.js","components/performance/InitialLineGraph.js","components/performance/total/casestatus/TotalInitialCaseStatusGraphElem.js","components/performance/RenewalLineGraph.js","components/performance/total/casestatus/TotalRenewalCaseStatusGraphElem.js","components/performance/total/intake/TotalInitialIntakeGraphElem.js","components/performance/total/intake/TotalRenewalIntakeGraphElem.js","components/performance/Performance.js","components/common/Utils.js","components/population/agegroup/AgeGroupBarGraph.js","components/population/agegroup/AgeGroupLineGraph.js","components/population/agegroup/AgeGroupGraphElem.js","components/population/countryofbirth/CountyOfBirthLineGraph.js","components/population/countryofbirth/CountryOfBirthGraphElem.js","components/population/maritalstatus/MaritalStatusBarGraph.js","components/population/maritalstatus/MaritalStatusLineGraph.js","components/population/maritalstatus/MartialStatusGraphElem.js","components/population/sex/SexBarGraph.js","components/population/sex/SexLineGraph.js","components/population/sex/SexGraphElem.js","components/population/state/StateLineGraph.js","components/population/state/StateGraphElem.js","components/population/Population.js","components/common/Routes.js","App.js","reportWebVitals.js","index.js"],"names":["Footer","className","Navigation","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","process","SexGraphElem","props","title","graphs","GRAPH_MARGIN","top","right","left","bottom","GRAPH_COLOR","byBirthCountryKeyName","byStateKeyName","GetPopulationByAgeGroupByYearData","aboveThirtyKeyName","aboveThirtyCategories","data","Object","keys","rawData","year","val","category","push","GetPopulationByMaritalStatusByYearData","GetPopulationByYear","GetPopulationBySexByYearData","GetPopulationKeys","Set","add","Array","from","GetLines","count","linesDict","forEach","dict","key","type","name","charAt","toUpperCase","slice","dataKey","stroke","Constants","activeDot","r","values","InitialLineGraph","DataProvider","aspect","margin","strokeDasharray","formatter","value","Intl","NumberFormat","format","TotalInitialCaseStatusGraphElem","ChartElem","RenewalLineGraph","TotalRenewalCaseStatusGraphElem","TotalInitialIntakeGraphElem","TotalRenewalIntakeGraphElem","Performance","GetAgeGroupName","GetBars","barsDict","Utils","fill","AgeGroupBarGraph","AgeGroupLineGraph","AgeGroupGraphElem","CountryOfBirthLineGraph","state","selection","handleChange","bind","event","this","setState","target","options","option","country","onChange","GetSelectionOptions","React","Component","CountryOfBirthGraphElem","MaritalStatusBarGraph","MaritalStatusLineGraph","SexBarGraph","SexLineGraph","StateLineGraph","StateGraphElem","Population","Routes","basename","exact","path","component","to","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactGA","initialize","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3aab50f0.chunk.js","sourcesContent":["function Footer()\n{\n    return (\n        <footer className=\"sticky-footer\">\n            <div className=\"container\">\n                <div className=\"text-center\">\n                    <small> joelhmarquez </small>\n                </div>\n            </div>\n        </footer>\n    );\n}\n\nexport default Footer;","import { Navbar,Nav } from 'react-bootstrap'\n\nfunction Navigation()\n{\n    return (\n        <Navbar bg=\"light\" expand=\"lg\" className=\"fixed-top\">\n        <Navbar.Brand href=\"#page-top\">DACA Analytics</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"ml-auto\">\n            <Nav.Link href={process.env.PUBLIC_URL + \"/population\"}>Population Data</Nav.Link>\n            <Nav.Link href={process.env.PUBLIC_URL + \"/performance\"}>Performance Data</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    );\n}\n\nexport default Navigation;","function SexGraphElem(props)\n{\n    return (\n        <div>\n            <br/>\n            <div className=\"card lg-6\">\n                <div className=\"card-header\">\n                {props.title}\n                </div>\n                <div className=\"card-body\">\n                    {props.graphs}\n                </div>\n            </div>\n            <br/>\n        </div>\n    );\n}\n\nexport default SexGraphElem;","export const GRAPH_WIDTH = 675\nexport const GRAPH_HEIGHT = 400\nexport const GRAPH_MARGIN = { top: 5, right: 30, left: 20, bottom: 5 }\nexport const GRAPH_COLOR = [\"#81D4FA\", \"#F48FB1\", \"#FDD835\", \"#CE93D8\", \"#00E676\", \"#8D6E63\", \"#E53935\", \"#00ACC1\", \"#455A64\", \"#FFFF00\"]","import rawData from '../../data/data.json';\n\nconst performanceKeyName = \"performance\"\nconst populationKeyName = \"population\"\nconst byAgeGroupKeyName = \"byAgeGroup\"\nconst byBirthCountryKeyName = \"byBirthCountry\"\nconst byStateKeyName = \"byState\"\nconst byMaritalStatusKeyName = \"byMaritalStatus\"\nconst bySexKeyName = \"bySex\"\nconst totalKeyName = \"total\"\nconst initialKeyName = \"initial\"\nconst renewalKeyName = \"renewal\"\n\nexport function GetPopulationByAgeGroupByYearData()\n{\n    let aboveThirtyKeyName = \"aboveThirty\"\n    let aboveThirtyCategories = [\"thirtyOneToThirtyFive\", \"thirtyOneToThirtySix\", \"thirtySixToThirtySeven\", \"thirtySixToThirtyNine\"]\n    let data = [];\n    for (var year of Object.keys(rawData.year))\n    {\n        if (rawData.year[year][populationKeyName] != null &&\n            rawData.year[year][populationKeyName][byAgeGroupKeyName] != null)\n        {\n            let val = rawData.year[year][populationKeyName][byAgeGroupKeyName];\n            val[\"year\"] = year;\n\n            for (var category of aboveThirtyCategories){\n                if (category in val){\n                    if (!(aboveThirtyKeyName in val)){\n                        val[aboveThirtyKeyName] = val[category]\n                    }\n                    else{\n                        val[aboveThirtyKeyName] += val[category]\n                    }\n                }\n                delete val[category]\n            }\n\n            data.push(val)\n        }\n    }\n\n    return data;\n}\n\nexport function GetPopulationByBirthCountry(country)\n{\n    let data = [];\n    for (var year of Object.keys(rawData.year))\n    {\n        if (rawData.year[year][populationKeyName] != null &&\n            rawData.year[year][populationKeyName][byBirthCountryKeyName] != null &&\n            country in rawData.year[year][populationKeyName][byBirthCountryKeyName])\n        {\n            let val = {\"year\" : year};\n            val[country] = rawData.year[year][populationKeyName][byBirthCountryKeyName][country];\n\n            data.push(val)\n        }\n    }\n\n    return data;\n}\n\nexport function GetPopulationByMaritalStatusByYearData()\n{\n    return GetPopulationByYear(byMaritalStatusKeyName);\n}\n\nexport function GetPopulationBySexByYearData()\n{\n    return GetPopulationByYear(bySexKeyName);\n}\n\nexport function GetPopulationByState(state)\n{\n    let data = [];\n    for (var year of Object.keys(rawData.year))\n    {\n        if (rawData.year[year][populationKeyName] != null &&\n            rawData.year[year][populationKeyName][byStateKeyName] != null &&\n            state in rawData.year[year][populationKeyName][byStateKeyName])\n        {\n            let val = {\"year\" : year};\n            val[state] = rawData.year[year][populationKeyName][byStateKeyName][state];\n\n            data.push(val)\n        }\n    }\n\n    return data;\n}\n\nexport function GetPopulationByBirthCountryKeys()\n{\n    return GetPopulationKeys(byBirthCountryKeyName);\n}\n\nexport function GetPopulationByStateKeys()\n{\n    return GetPopulationKeys(byStateKeyName);\n}\n\nfunction GetPopulationByYear(category)\n{\n    let data = [];\n    for (var year of Object.keys(rawData.year))\n    {\n        if (rawData.year[year][populationKeyName] != null &&\n            rawData.year[year][populationKeyName][category] != null)\n        {\n            let val = rawData.year[year][populationKeyName][category];\n            val[\"year\"] = year;\n\n            data.push(val)\n        }\n    }\n\n    return data;\n}\n\nfunction GetPopulationKeys(category)\n{\n    let keys = new Set();\n    for (var year of Object.keys(rawData.year))\n    {\n        if (rawData.year[year][populationKeyName] != null &&\n            rawData.year[year][populationKeyName][category] != null)\n        {\n            for (var val of Object.keys(rawData.year[year][populationKeyName][category]))\n            {\n                keys.add(val)\n            }\n        }\n    }\n    \n    return Array.from(keys);\n}\n\nexport function GetInitialPerformanceByYearData(category)\n{\n    let data = [];\n    for (var year of Object.keys(rawData.year))\n    {\n        if (rawData.year[year][performanceKeyName] != null &&\n            rawData.year[year][performanceKeyName][totalKeyName] != null &&\n            rawData.year[year][performanceKeyName][totalKeyName][initialKeyName] != null &&\n            rawData.year[year][performanceKeyName][totalKeyName][initialKeyName][category] != null)\n        {\n            let val = rawData.year[year][performanceKeyName][totalKeyName][initialKeyName][category];\n            val[\"year\"] = year;\n\n            data.push(val)\n        }\n    }\n\n    return data;\n}\n\nexport function GetRenewalPerformanceByYearData(category)\n{\n    let data = [];\n    for (var year of Object.keys(rawData.year))\n    {\n        if (rawData.year[year][performanceKeyName] != null &&\n            rawData.year[year][performanceKeyName][totalKeyName] != null &&\n            rawData.year[year][performanceKeyName][totalKeyName][renewalKeyName] != null &&\n            rawData.year[year][performanceKeyName][totalKeyName][renewalKeyName][category] != null)\n        {\n            let val = rawData.year[year][performanceKeyName][totalKeyName][renewalKeyName][category];\n            val[\"year\"] = year;\n\n            data.push(val)\n        }\n    }\n\n    return data;\n}","import * as Constants from '../common/Constants'\nimport * as DataProvider from '../common/DataProvider';\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\n  } from 'recharts';\n\n  function GetLines(data)\n  {\n      let count = 0;\n      let linesDict = {};\n  \n      data.forEach(function(dict){\n          for (var key of Object.keys(dict)){\n              if (key !== \"year\" && !(key in linesDict)){\n                  linesDict[key] = <Line type=\"monotone\" name={key.charAt(0).toUpperCase() + key.slice(1)} dataKey={key} stroke={Constants.GRAPH_COLOR[count]} activeDot={{ r: 4 }} key={count} />\n                  count += 1\n              }\n          }\n      });\n  \n      return Object.values(linesDict);\n  }\n\nfunction InitialLineGraph(props)\n{\n    let data = DataProvider.GetInitialPerformanceByYearData(props.category);\n\n    return (\n        <ResponsiveContainer aspect={4}>\n            <LineChart\n                data={data}\n                margin={Constants.GRAPH_MARGIN}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"year\" />\n                <YAxis />\n                <Tooltip formatter={(value) => new Intl.NumberFormat('en').format(value)} />\n                <Legend />\n                {GetLines(data)}\n            </LineChart>\n        </ResponsiveContainer>\n    );\n}\n\nexport default InitialLineGraph;","import ChartElem from '../../../common/ChartElem'\nimport InitialLineGraph from '../../InitialLineGraph'\n\nfunction GetGraphs()\n{\n    return(\n        <div className=\"row\">\n            <InitialLineGraph category=\"caseStatus\"/>\n        </div>);\n}\n\nfunction TotalInitialCaseStatusGraphElem()\n{\n    return (\n       <ChartElem title=\"DACA Initial Application Case Status\" type=\"area-chart\" graphs={GetGraphs()}/>\n    );\n}\n\nexport default TotalInitialCaseStatusGraphElem;","import * as Constants from '../common/Constants'\nimport * as DataProvider from '../common/DataProvider';\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\n  } from 'recharts';\n\n  function GetLines(data)\n  {\n      let count = 0;\n      let linesDict = {};\n  \n      data.forEach(function(dict){\n          for (var key of Object.keys(dict)){\n              if (key !== \"year\" && !(key in linesDict)){\n                  linesDict[key] = <Line type=\"monotone\" name={key.charAt(0).toUpperCase() + key.slice(1)} dataKey={key} stroke={Constants.GRAPH_COLOR[count]} activeDot={{ r: 4 }} key={count} />\n                  count += 1\n              }\n          }\n      });\n  \n      return Object.values(linesDict);\n  }\n\nfunction RenewalLineGraph(props)\n{\n    let data = DataProvider.GetRenewalPerformanceByYearData(props.category);\n\n    return (\n        <ResponsiveContainer aspect={4}>\n            <LineChart\n                data={data}\n                margin={Constants.GRAPH_MARGIN}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"year\" />\n                <YAxis />\n                <Tooltip formatter={(value) => new Intl.NumberFormat('en').format(value)} />\n                <Legend />\n                {GetLines(data)}\n            </LineChart>\n        </ResponsiveContainer>\n    );\n}\n\nexport default RenewalLineGraph;","import ChartElem from '../../../common/ChartElem'\nimport RenewalLineGraph from '../../RenewalLineGraph'\n\nfunction GetGraphs()\n{\n    return(\n        <div className=\"row\">\n            <RenewalLineGraph category=\"caseStatus\"/>\n        </div>);\n}\n\nfunction TotalRenewalCaseStatusGraphElem()\n{\n    return (\n       <ChartElem title=\"DACA Renewal Application Case Status\" type=\"area-chart\" graphs={GetGraphs()}/>\n    );\n}\n\nexport default TotalRenewalCaseStatusGraphElem;","import ChartElem from '../../../common/ChartElem'\nimport InitialLineGraph from '../../InitialLineGraph'\n\nfunction GetGraphs()\n{\n    return(\n        <div className=\"row\">\n            <InitialLineGraph category=\"intake\"/>\n        </div>);\n}\n\nfunction TotalInitialIntakeGraphElem()\n{\n    return (\n       <ChartElem title=\"DACA Initial Application Intake\" type=\"area-chart\" graphs={GetGraphs()}/>\n    );\n}\n\nexport default TotalInitialIntakeGraphElem;","import ChartElem from '../../../common/ChartElem'\nimport RenewalLineGraph from '../../RenewalLineGraph'\n\nfunction GetGraphs()\n{\n    return(\n        <div className=\"row\">\n            <RenewalLineGraph category=\"intake\"/>\n        </div>);\n}\n\nfunction TotalRenewalIntakeGraphElem()\n{\n    return (\n       <ChartElem title=\"DACA Renewal Application Intake\" type=\"area-chart\" graphs={GetGraphs()}/>\n    );\n}\n\nexport default TotalRenewalIntakeGraphElem;","import TotalInitialCaseStatusGraphElem from './total/casestatus/TotalInitialCaseStatusGraphElem';\nimport TotalRenewalCaseStatusGraphElem from './total/casestatus/TotalRenewalCaseStatusGraphElem';\nimport TotalInitialIntakeGraphElem from './total/intake/TotalInitialIntakeGraphElem'\nimport TotalRenewalIntakeGraphElem from './total/intake/TotalRenewalIntakeGraphElem'\n\nfunction Performance() {\n    return (\n      <div>\n        <TotalInitialIntakeGraphElem/>\n        <TotalInitialCaseStatusGraphElem/>\n        <TotalRenewalIntakeGraphElem/>\n        <TotalRenewalCaseStatusGraphElem/>\n      </div>\n    );\n  }\n  \n  export default Performance;","export function GetAgeGroupName(dataKey)\n{\n    switch(dataKey){\n        case \"underSixteen\":\n            return \"Under 16\"\n        case \"sixteenToTwenty\":\n            return \"16-20\"\n        case \"twentOneToTwentyFive\":\n            return \"20-25\"\n        case \"twentySixToThrity\":\n            return \"26-30\"\n        case \"thirtyOneToThirtyFive\":\n            return \"31-35\"\n        case \"thirtyOneToThirtySix\":\n            return \"31-36\"\n        case \"thirtySixToThirtySeven\":\n            return \"36-37\"\n        case \"thirtySixToThirtyNine\":\n            return \"37-39\"\n        case \"aboveThirty\":\n            return \"Over 30\"\n        default:\n            return \"Unknown\"\n    };\n}","import * as Constants from '../../common/Constants'\nimport * as DataProvider from '../../common/DataProvider'\nimport * as Utils from '../../common/Utils'\n\nimport {\n    BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\n  } from 'recharts';\n\nfunction GetBars(data)\n{\n    let count = 0;\n    let barsDict = {};\n\n    data.forEach(function(dict){\n        for (var key of Object.keys(dict)){\n            if (key !== \"year\" && !(key in barsDict)){\n                barsDict[key] = <Bar name={Utils.GetAgeGroupName(key)} dataKey={key} fill={Constants.GRAPH_COLOR[count]} key={count} />\n                count += 1\n            }\n        }\n    });\n\n    return Object.values(barsDict);\n}\n\nfunction AgeGroupBarGraph()\n{\n    let data = DataProvider.GetPopulationByAgeGroupByYearData();\n\n    return (\n        <ResponsiveContainer aspect={1.6}>\n            <BarChart\n                data={data}\n                margin={Constants.GRAPH_MARGIN}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"year\" />\n                <YAxis />\n                <Tooltip formatter={(value) => new Intl.NumberFormat('en').format(value)} />\n                <Legend />\n                {GetBars(data)}\n            </BarChart>\n        </ResponsiveContainer>\n    );\n}\n\nexport default AgeGroupBarGraph;","import * as Constants from '../../common/Constants'\nimport * as DataProvider from '../../common/DataProvider';\nimport * as Utils from '../../common/Utils'\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\n  } from 'recharts';\n\nfunction GetLines(data)\n{\n    let count = 0;\n    let linesDict = {};\n\n    data.forEach(function(dict){\n        for (var key of Object.keys(dict)){\n            if (key !== \"year\" && !(key in linesDict)){\n                linesDict[key] = <Line type=\"monotone\" name={Utils.GetAgeGroupName(key)} dataKey={key} stroke={Constants.GRAPH_COLOR[count]} activeDot={{ r: 4 }} key={count} />\n                count += 1\n            }\n        }\n    });\n\n    return Object.values(linesDict);\n}\n\nfunction AgeGroupLineGraph()\n{\n    let data = DataProvider.GetPopulationByAgeGroupByYearData();\n\n    return (\n        <ResponsiveContainer aspect={1.6}>\n            <LineChart\n                data={data}\n                margin={Constants.GRAPH_MARGIN}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"year\" />\n                <YAxis />\n                <Tooltip formatter={(value) => new Intl.NumberFormat('en').format(value)} />\n                <Legend />\n                {GetLines(data)}\n            </LineChart>\n        </ResponsiveContainer>\n    );\n}\n\nexport default AgeGroupLineGraph;","import ChartElem from '../../common/ChartElem'\nimport AgeGroupBarGraph from './AgeGroupBarGraph'\nimport AgeGroupLineGraph from './AgeGroupLineGraph'\n\nfunction GetGraphs()\n{\n    return(\n        <div className=\"row\">\n            <div className=\"col-lg-6\">\n                <AgeGroupLineGraph/>\n            </div>\n            <div className=\"col-lg-6\">\n                <AgeGroupBarGraph/>\n            </div>\n        </div>);\n}\n\nfunction AgeGroupGraphElem()\n{\n    return (\n       <ChartElem title=\"DACA Beneficiaries by Age Group\" type=\"area-chart\" graphs={GetGraphs()}/>\n    );\n}\n\nexport default AgeGroupGraphElem;","import * as Constants from '../../common/Constants'\nimport * as DataProvider from '../../common/DataProvider';\nimport React from 'react';\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\n  } from 'recharts';\n\n\nclass CountryOfBirthLineGraph extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        let keys = DataProvider.GetPopulationByBirthCountryKeys()\n        this.state = {keys: keys, selection: keys[0]};\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event)\n    {\n        this.setState({selection: event.target.value});\n    }\n\n    GetSelectionOptions()\n    {\n        let options = []\n        for (var option of this.state.keys)\n        {\n            options.push(<option value={option} key={option}>{option}</option>)\n        }\n\n        return options;\n    }\n\n    GetLines(data)\n    {\n        let count = 0;\n        let linesDict = {};\n    \n        data.forEach(function(dict){\n            for (var key of Object.keys(dict)){\n                if (key !== \"year\" && !(key in linesDict)){\n                    linesDict[key] = <Line type=\"monotone\" name={key} dataKey={key} stroke={Constants.GRAPH_COLOR[count]} activeDot={{ r: 4 }} key={count} />\n                    count += 1\n                }\n            }\n        });\n    \n        return Object.values(linesDict);\n    }\n\n    render()\n    {\n        let data = DataProvider.GetPopulationByBirthCountry(this.state.selection)\n        return (\n            <div>\n                <select value={this.state.selection} onChange={this.handleChange}>\n                    {this.GetSelectionOptions()}\n                </select>\n                <br/>\n                <br/>\n                <ResponsiveContainer aspect={3.5}>\n                    <LineChart\n                        data={data}\n                        margin={Constants.GRAPH_MARGIN}\n                    >\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"year\" />\n                        <YAxis />\n                        <Tooltip formatter={(value) => new Intl.NumberFormat('en').format(value)} />\n                        <Legend />\n                        {this.GetLines(data)}\n                    </LineChart>\n                </ResponsiveContainer>\n            </div>\n        );\n    }\n}\n\nexport default CountryOfBirthLineGraph;","import ChartElem from '../../common/ChartElem'\nimport CountryOfBirthLineGraph from './CountyOfBirthLineGraph';\n\nfunction GetGraphs()\n{\n    return(\n        <div>\n            <CountryOfBirthLineGraph/>\n        </div>);\n}\n\nfunction CountryOfBirthGraphElem()\n{\n    return (\n       <ChartElem title=\"DACA Beneficiaries by Country of Birth\" type=\"area-chart\" graphs={GetGraphs()}/>\n    );\n}\n\nexport default CountryOfBirthGraphElem;","import * as Constants from '../../common/Constants'\nimport * as DataProvider from '../../common/DataProvider';\nimport {\n    BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\n  } from 'recharts';\n\nfunction GetBars(data)\n{\n    let count = 0;\n    let barsDict = {};\n\n    data.forEach(function(dict){\n        for (var key of Object.keys(dict)){\n            if (key !== \"year\" && !(key in barsDict)){\n                barsDict[key] = <Bar name={key.charAt(0).toUpperCase() + key.slice(1)} dataKey={key} fill={Constants.GRAPH_COLOR[count]} key={count} />\n                count += 1\n            }\n        }\n    });\n\n    return Object.values(barsDict);\n}\n\nfunction MaritalStatusBarGraph()\n{\n    let data = DataProvider.GetPopulationByMaritalStatusByYearData();\n\n    return (\n        <ResponsiveContainer aspect={1.6}>\n            <BarChart\n                data={data}\n                margin={Constants.GRAPH_MARGIN}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"year\" />\n                <YAxis />\n                <Tooltip formatter={(value) => new Intl.NumberFormat('en').format(value)} />\n                <Legend />\n                {GetBars(data)}\n            </BarChart>\n        </ResponsiveContainer>\n    );\n}\n\nexport default MaritalStatusBarGraph;","import * as Constants from '../../common/Constants'\nimport * as DataProvider from '../../common/DataProvider';\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\n  } from 'recharts';\n\nfunction GetLines(data)\n{\n    let count = 0;\n    let linesDict = {};\n\n    data.forEach(function(dict){\n        for (var key of Object.keys(dict)){\n            if (key !== \"year\" && !(key in linesDict)){\n                linesDict[key] = <Line type=\"monotone\" name={key.charAt(0).toUpperCase() + key.slice(1)} dataKey={key} stroke={Constants.GRAPH_COLOR[count]} activeDot={{ r: 4 }} key={count} />\n                count += 1\n            }\n        }\n    });\n\n    return Object.values(linesDict);\n}\n\nfunction MaritalStatusLineGraph()\n{\n    let data = DataProvider.GetPopulationByMaritalStatusByYearData();\n\n    return (\n        <ResponsiveContainer aspect={1.6}>\n            <LineChart\n                data={data}\n                margin={Constants.GRAPH_MARGIN}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"year\" />\n                <YAxis />\n                <Tooltip formatter={(value) => new Intl.NumberFormat('en').format(value)} />\n                <Legend />\n                {GetLines(data)}\n            </LineChart>\n        </ResponsiveContainer>\n    );\n}\n\nexport default MaritalStatusLineGraph;","import ChartElem from '../../common/ChartElem'\nimport MaritalStatusBarGraph from './MaritalStatusBarGraph'\nimport MaritalStatusLineGraph from './MaritalStatusLineGraph'\n\nfunction GetGraphs()\n{\n    return(\n        <div className=\"row\">\n            <div className=\"col-lg-6\">\n                <MaritalStatusLineGraph/>\n            </div>\n            <div className=\"col-lg-6\">\n                <MaritalStatusBarGraph/>\n            </div>\n        </div>);\n}\n\nfunction AgeGroupGraphElem()\n{\n    return (\n       <ChartElem title=\"DACA Beneficiaries by Marital Status\" type=\"area-chart\" graphs={GetGraphs()}/>\n    );\n}\n\nexport default AgeGroupGraphElem;","import * as Constants from '../../common/Constants'\nimport * as DataProvider from '../../common/DataProvider';\nimport {\n    BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\n  } from 'recharts';\n\n  function GetBars(data)\n  {\n      let count = 0;\n      let barsDict = {};\n  \n      data.forEach(function(dict){\n          for (var key of Object.keys(dict)){\n              if (key !== \"year\" && !(key in barsDict)){\n                  barsDict[key] = <Bar name={key.charAt(0).toUpperCase() + key.slice(1)} dataKey={key} fill={Constants.GRAPH_COLOR[count]} key={count} />\n                  count += 1\n              }\n          }\n      });\n  \n      return Object.values(barsDict);\n  }\n\nfunction SexBarGraph()\n{\n    let data = DataProvider.GetPopulationBySexByYearData();\n\n    return (\n        <ResponsiveContainer aspect={1.6}>\n            <BarChart\n                data={data}\n                margin={Constants.GRAPH_MARGIN}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"year\" />\n                <YAxis />\n                <Tooltip formatter={(value) => new Intl.NumberFormat('en').format(value)} />\n                <Legend />\n                {GetBars(data)}\n            </BarChart>\n        </ResponsiveContainer>\n    );\n}\n\nexport default SexBarGraph;","import * as Constants from '../../common/Constants'\nimport * as DataProvider from '../../common/DataProvider';\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\n  } from 'recharts';\n\n  function GetLines(data)\n  {\n      let count = 0;\n      let linesDict = {};\n  \n      data.forEach(function(dict){\n          for (var key of Object.keys(dict)){\n              if (key !== \"year\" && !(key in linesDict)){\n                  linesDict[key] = <Line type=\"monotone\" name={key.charAt(0).toUpperCase() + key.slice(1)} dataKey={key} stroke={Constants.GRAPH_COLOR[count]} activeDot={{ r: 4 }} key={count} />\n                  count += 1\n              }\n          }\n      });\n  \n      return Object.values(linesDict);\n  }\n\nfunction SexLineGraph()\n{\n    let data = DataProvider.GetPopulationBySexByYearData();\n\n    return (\n        <ResponsiveContainer aspect={1.6}>\n            <LineChart\n                data={data}\n                margin={Constants.GRAPH_MARGIN}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"year\" />\n                <YAxis />\n                <Tooltip formatter={(value) => new Intl.NumberFormat('en').format(value)} />\n                <Legend />\n                {GetLines(data)}\n            </LineChart>\n        </ResponsiveContainer>\n    );\n}\n\nexport default SexLineGraph;","import ChartElem from '../../common/ChartElem'\nimport SexBarGraph from './SexBarGraph'\nimport SexLineGraph from './SexLineGraph'\n\nfunction GetGraphs()\n{\n    return(\n        <div className=\"row\">\n            <div className=\"col-lg-6\">\n                <SexLineGraph/>\n            </div>\n            <div className=\"col-lg-6\">\n                <SexBarGraph/>\n            </div>\n        </div>);\n}\n\nfunction SexGraphElem()\n{\n    return (\n       <ChartElem title=\"DACA Beneficiaries by Sex\" type=\"area-chart\" graphs={GetGraphs()}/>\n    );\n}\n\nexport default SexGraphElem;","import * as Constants from '../../common/Constants'\nimport * as DataProvider from '../../common/DataProvider';\nimport React from 'react';\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\n  } from 'recharts';\n\nclass StateLineGraph extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        let keys = DataProvider.GetPopulationByStateKeys()\n        this.state = {keys: keys, selection: keys[0]};\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event)\n    {\n        this.setState({selection: event.target.value});\n    }\n\n    GetSelectionOptions()\n    {\n        let options = []\n        for (var option of this.state.keys)\n        {\n            options.push(<option value={option} key={option}>{option}</option>)\n        }\n\n        return options;\n    }\n\n    GetLines(data)\n    {\n        let count = 0;\n        let linesDict = {};\n    \n        data.forEach(function(dict){\n            for (var key of Object.keys(dict)){\n                if (key !== \"year\" && !(key in linesDict)){\n                    linesDict[key] = <Line type=\"monotone\" name={key} dataKey={key} stroke={Constants.GRAPH_COLOR[count]} activeDot={{ r: 4 }} key={count} />\n                    count += 1\n                }\n            }\n        });\n    \n        return Object.values(linesDict);\n    }\n\n    render()\n    {\n        let data = DataProvider.GetPopulationByState(this.state.selection)\n        return (\n            <div>\n                <select value={this.state.selection} onChange={this.handleChange}>\n                    {this.GetSelectionOptions()}\n                </select>\n                <br/>\n                <br/>\n                <ResponsiveContainer aspect={3.5}>\n                    <LineChart\n                        data={data}\n                        margin={Constants.GRAPH_MARGIN}\n                    >\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"year\" />\n                        <YAxis />\n                        <Tooltip formatter={(value) => new Intl.NumberFormat('en').format(value)} />\n                        <Legend />\n                        {this.GetLines(data)}\n                    </LineChart>\n                </ResponsiveContainer>\n            </div>\n        );\n    }\n}\n\nexport default StateLineGraph;","import ChartElem from '../../common/ChartElem'\nimport StateLineGraph from './StateLineGraph';\n\nfunction GetGraphs()\n{\n    return(\n        <div>\n            <StateLineGraph/>\n        </div>);\n}\n\nfunction StateGraphElem()\n{\n    return (\n       <ChartElem title=\"DACA Beneficiaries by State of Residence\" type=\"area-chart\" graphs={GetGraphs()}/>\n    );\n}\n\nexport default StateGraphElem;","import AgeGroupGraphElem from './agegroup/AgeGroupGraphElem'\nimport CountryOfBirthGraphElem from './countryofbirth/CountryOfBirthGraphElem'\nimport MaritalStatusGraphElem from './maritalstatus/MartialStatusGraphElem'\nimport SexGraphElem from './sex/SexGraphElem'\nimport StateGraphElem from './state/StateGraphElem'\n\nfunction Population() {\n    return (\n      <div>\n        <AgeGroupGraphElem/>\n        <SexGraphElem/>\n        <MaritalStatusGraphElem/>\n        <CountryOfBirthGraphElem/>\n        <StateGraphElem/>\n      </div>\n    );\n  }\n  \n  export default Population;","import Navigation from './Navigation'\nimport Performance from '../performance/Performance'\nimport Population from '../population/Population'\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\";\n\nfunction Routes() {\n    return (\n      <div>\n        <Navigation />\n        <Router basename={process.env.PUBLIC_URL}>\n            <Switch>\n              <Route exact path=\"/population\" component={Population} />\n              <Route exact path=\"/\">\n                <Redirect to=\"/population\" />\n              </Route>\n              <Route exact path=\"/performance\" component={Performance} />\n            </Switch>\n          </Router>\n      </div>\n    );\n  };\n\nexport default Routes;","import Footer from './components/common/Footer'\nimport Navigation from './components/common/Navigation'\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport Routes from './components/common/Routes'\n\nfunction App() {\n  return (\n    <div>\n      <Navigation />\n      <div className=\"content-wrapper\">\n        <div className=\"container-fluid\">\n        <Router>\n          <Routes/>\n        </Router>\n        </div>\n      </div>\n    <Footer />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactGA from 'react-ga';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactGA.initialize('UA-115530224-1');\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}